// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../src/generated/type-graphql"
  emitTranspiledCode = true
  simpleResolvers    = true
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  email            String?
  isEmailVerified  Boolean @default(false)
  mobile           String  @unique
  isMobileVerified Boolean @default(false)

  firstName String?
  lastName  String?
  image     String?

  //** user have multiple profile */
  profiles Profile[]

  aadhaarMobile String?
  aadhaar       Doc?
  panCard       Doc?

  address  Address[]
  contacts ContactNumber[]

  //** created by user */
  createdBusiness      Business[]     @relation("business")
  craetedBusinessUnits BusinessUnit[] @relation("businessUnits")

  //** Faverite commodities */
  favoriteCommodity FavoriteCommodity[]

  //** All invoice created by this user */
  invoices Invoice[] @relation("user_invoices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  @@unique([email, mobile, aadhaar.number])
  @@unique([email, mobile])
}

model Profile {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  //* @TODO we need to specify the roles with the business types and remove the Business Type enum */
  profileType BusinessType
  status      UserStatus // owner verification pending, invited, active, otp verification pending, blocked

  //* A profile can have a role */
  //**  @TODO profile can have multiple roles */
  role Role


  // user profile relatioship 1-M
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  //** invitations mangement */
  invitatedById      String?          @db.ObjectId
  invitatedBy        Profile?         @relation("invitations", fields: [invitatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invitationStatus   InvitationStatus
  invitationHashCode String?
  invitationDate     DateTime?
  invitationExpiry   DateTime?

  createdInvitations Profile[] @relation("invitations")


  // profile business relatioship M-1
  businessId String?   @db.ObjectId
  business   Business? @relation(fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // profile businessUnit relatioship M-1
  businessUnitId String?       @db.ObjectId
  businessUnits  BusinessUnit? @relation(fields: [businessUnitId], references: [id])

  paymentSubscription PaymentSubscription[] @relation("paymentSubscriptions")
  //** All invoice created by this profile */
  invoices            Invoice[]             @relation("profile_invoices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)


  @@unique([userId, businessId, businessUnitId])
}

model Business {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  GSTIN               String
  leagalName          String         @unique
  displayName         String         @unique
  description         String?
  logo                String?
  dateOfIncorporation DateTime?
  constitution        String?
  address             Address?
  contactInfo         contactInfo?
  status              BusinessStatus @default(Active)
  // preferred to use calculatiom methord instead of this field
  remainingCount      Int?           @default(0)


  //** dummy relations for prisma */
  //** business have multiple business units in QC  */
  businessUnits       BusinessUnit[]
  //** business profile relationship 1-M */
  profiles            Profile[]
  //** Subscriptions Payments (active & history records) */
  paymentSubscription PaymentSubscription[]
  //** All invoice created by this business */
  invoices            Invoice[]             @relation("business_invoices")
  Coupon              Coupon[]
  TopupPayment        TopupPayment[]


  createdById String   @db.ObjectId
  createdBy   User     @relation("business", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isActive  Boolean @default(false)
  isDeleted Boolean @default(false)
}

// branch/warehouse/sub entity  -- only valid for QC
model BusinessUnit {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?

  businessUnitType BusinessUnitType

  address     Address?
  contactInfo contactInfo?
  status      BusinessStatus

  businessId String    @db.ObjectId
  business   Business  @relation(fields: [businessId], references: [id])
  profiles   Profile[]

  createdById String   @db.ObjectId
  cCreatedBy  User?    @relation("businessUnits", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

}

model Invoice {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  invoiceNumber      String
  invoiceDate        DateTime
  invoiceAmount      Float
  GSTAmount          Float
  TotalAmount        Float
  invoiceStatus      InvoiceStatus
  paymentStatus      PaymentStatus
  transactionDetails TransactionDetail[]

  //** invoice items */
  subscriptions PaymentSubscription[] @relation("invoices")
  topupPayments    TopupPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  //** Invoice relations */
  createdByUserId String         @db.ObjectId
  createdByUser   User           @relation("user_invoices", fields: [createdByUserId], references: [id])
  Profile         Profile?       @relation("profile_invoices", fields: [profileId], references: [id])
  profileId       String?        @db.ObjectId
  Business        Business?      @relation("business_invoices", fields: [businessId], references: [id])
  businessId      String?        @db.ObjectId
  
}

model PaymentSubscription {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  //** Bussiness subscription */
  businessId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  subscriptionPlanId String            @db.ObjectId
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])

  status     SubscriptionStatus
  expiryDate DateTime?

  //** Payment subscription Invoice */
  invoiceId                  String?  @db.ObjectId
  invoice                    Invoice? @relation("invoices", fields: [invoiceId], references: [id])
  //** Invoice Item details */
  subscriptionCount          Int?
  subscriptionValidityInDays Int?
  subscriptionAmount         Float?

  createdById String   @db.ObjectId
  createdBy   Profile  @relation("paymentSubscriptions", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SubscriptionPlan {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  price          String?
  count          Int?
  validityInDays Int?

  //@TODO add the subscription type
  //** applicable coupons */
  couponIds String[] @db.ObjectId
  coupons   Coupon[] @relation(fields: [couponIds], references: [id])

  //** upgrade suggessions for subscription plans */
  upgradablePlans SubscriptionPlan[] @relation("upgradablePlans")
  basePlans       SubscriptionPlan?  @relation("upgradablePlans", fields: [basePlanIds], references: [id], onDelete: NoAction, onUpdate: NoAction)
  basePlanIds     String[]           @db.ObjectId

  paymentSubscriptions PaymentSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}

// ** Use normal subscription plan with a type is bettaer than  using Topup Payment & Topup Plan model*/
model TopupPayment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amount Float

  paymentStatus PaymentStatus

  //** topup Payment  Invoice */
  invoiceId String?  @db.ObjectId
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  //** topup plan relation */
  topupPlanId String    @db.ObjectId
  topupPlan   TopupPlan @relation(fields: [topupPlanId], references: [id])

  //** topup bussiness invoice */
  businessId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}

model TopupPlan {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  price          String?
  count          Int?
  validityInDays Int?

  //@TODO add the subscription type
  //** applicable coupons */
  couponIds String[] @db.ObjectId
  coupons   Coupon[] @relation(fields: [couponIds], references: [id])

  //** dummy relation for prisma */
  topupPayments TopupPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}

model Coupon {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  couponCode   String
  description  String?
  couponType   CouponType
  couponValue  Float?
  couponCount  Int?
  couponStatus CouponStatus
  couponExpiry DateTime?

  //** Coupon applicable to subscription plans M-M*/
  subscriptionPlanIds String[]           @db.ObjectId
  subscriptionPlan    SubscriptionPlan[] @relation(fields: [subscriptionPlanIds], references: [id])

  //** Coupon applicable to topup plans M-M*/
  topupPlanIds String[]    @db.ObjectId
  topupPlan    TopupPlan[] @relation(fields: [topupPlanIds], references: [id])

  //** Coupon applicable to business , special coupons for perticular busines*/
  businessId String    @db.ObjectId
  business   Business? @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commodity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)

  //** https://github.com/prisma/prisma/issues/12552 */
  favoriteUsers FavoriteCommodity[]
}

model FavoriteCommodity {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  commodity   Commodity @relation(fields: [commodityId], references: [id])
  commodityId String    @db.ObjectId
  User        User      @relation(fields: [userId], references: [id])

  @@unique([userId, commodityId])
}

type TransactionDetail {
  transactionId     String
  transactionRefId  String
  transactionStatus TransactionStatus
  transactionAmount Float
  transactionDate   DateTime
  transactionType   TransactionType
  transactionMode   TransactionMode
}

type ContactNumber {
  type       String
  number     String
  isVerified Boolean @default(false)
}

type Address {
  label        String
  addressLine1 String
  addressLine2 String?
  houseNo      String?
  BuildingName String?
  landMark     String?
  city         String
  state        String
  country      String
  pincode      String
  isPrimary    Boolean @default(false)
}

type Doc {
  image      String?
  number     String
  isVerified Boolean @default(false)
}

type contactInfo {
  contact     ContactNumber[]
  socialMedia SocialMedia?
  email       String?
  website     String?
  latitude    String?
  longitude   String?
}

type SocialMedia {
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  googlePlus String?
  youtube    String?
}

enum InvitationStatus {
  NotRequired
  PendingOwnerApproval
  PendingUserApproval
  Accepted
  Rejected
  Expired
}

enum BusinessUnitType {
  Branch
  Warehouse
  SubEntity
}

enum UserStatus {
  active
  blocked
  invited
  ownerVerificationPending
  otpVerificationPending
}

enum BusinessStatus {
  Active
  Deleted
  Approved
  Rejected
  Blocked
  Draft
  Pending
  Closed
  Inactive
}

enum SubscriptionStatus {
  Expired
  Active
  Deleted
  PaymentPending
  PaymentFailed
  Closed
  Inactive
}

enum BusinessType {
  QC
  Listing
  Trading
}

enum Role {
  Owner
  Manager
  TradingManager
  ListingManager
  Trader
  Agent
  WarehouseManager
  QCAnalysit
  QCApprover
}

enum InvoiceStatus {
  Draft
  Paid
  Cancelled
  Rejected
  Pending
  Closed
  Inactive
}

enum PaymentStatus {
  Pending
  Success
  Failed
  Cancelled
  Expired
}

enum TransactionMode {
  Online
  Offline
}

enum TransactionType {
  Payment
  Refund
}

enum TransactionStatus {
  Success
  Failed
  Cancelled
  Expired
}

enum CouponType {
  Percentage
  Fixed
}

enum CouponStatus {
  Active
  Expired
  Used
  Deleted
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../src/generated/type-graphql"
  emitTranspiledCode = true
  simpleResolvers    = true
}

model BussinessListing {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  listingCategyId String        @db.ObjectId
  ListingCategy   ListingCategy @relation(fields: [listingCategyId], references: [id])

  Attributes        AttributeWithValues[]
  BusinessQuotation BusinessQuotation[]
  RFQ               RFQ[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)

}

model RFQ {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  Attributes AttributeWithValues[]
  // Quotation user/ bussiness info
  businessId String                @db.ObjectId

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  isActive           Boolean           @default(true)
  isDeleted          Boolean           @default(false)
  BussinessListing   BussinessListing? @relation(fields: [bussinessListingId], references: [id])
  bussinessListingId String?           @db.ObjectId
}

model BusinessQuotation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  Attributes AttributeWithValues[]

  // Quotation user/ bussiness info
  businessId String @db.ObjectId

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  isActive           Boolean           @default(true)
  isDeleted          Boolean           @default(false)
  BussinessListing   BussinessListing? @relation(fields: [bussinessListingId], references: [id])
  bussinessListingId String?           @db.ObjectId
}

model ListingCategy {
  id                      String          @id @default(auto()) @map("_id") @db.ObjectId
  name                    String          @unique
  nameTransilations       Translation[]
  description             String
  descriptionTranslations Translation[] 
  ListingFormAttributes   AttributeItem[]
  QuotationFprmAttributes AttributeItem[]

  BussinessListings BussinessListing[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isActive          Boolean            @default(true)
  isDeleted         Boolean            @default(false)

}

type AttributeWithValues {
  name  String
  type  AttributeType
  transilations Translation[]
  value String
}

type Translation {
  value  String
  language  Language
}

type AttributeItem {
  orderByNo        Int // optional
  label            String
  type             AttributeType
  options          String[]
  attributeContols AttributeContols[]
}

enum AttributeType {
  text
  textArea
  number
  date
  checkbox
  radio
  dropdown
  select
  multiSelect
  password
  file
  image
}

enum AttributeContols {
  min
  max
  minLength
  maxLength
  isEmail
  isNotEmpty
  isPhone
  isNumber
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  email            String? @unique
  isEmailVerified  Boolean @default(false)
  mobile           String  @unique
  isMobileVerified Boolean @default(false)

  firstName String?
  lastName  String?
  image     String?

  userType UserType

  //** user have multiple profile */
  profiles Profile[]

  aadhaarMobile String?
  aadhaar       Doc?
  panCard       Doc?

  address  Address[]
  contacts ContactNumber[]

  //** created by user */
  createdBusiness      Business[]     @relation("business")
  craetedBusinessUnits BusinessUnit[] @relation("businessUnits")

  //** Favorite commodities */
  favoriteCommodityMaster FavoriteCommodityMaster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  @@unique([email, mobile, aadhaar.number])
  @@unique([email, mobile])
}

model Business {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  GSTIN               String?
  displayName         String?        @unique // copy the user full name 
  description         String?
  logo                String?
  dateOfIncorporation DateTime?
  constitution        String?
  address             Address?
  contactInfo         contactInfo?
  status              BusinessStatus @default(Active)
  // preferred to use calculatiom methord instead of this field
  remainingCount      Int?           @default(0)

  //** dummy relations for prisma */
  //** business have multiple business units in QC  */
  businessUnits       BusinessUnit[]
  //** business profile relationship 1-M */
  profiles            Profile[]
  //** Subscriptions Payments (active & history records) */
  paymentSubscription PaymentSubscription[]
  //** All invoice created by this business */
  invoices            Invoice[]             @relation("business_invoices")
  coupon              Coupon[]
  TopupPayment        TopupPayment[]

  // owned TradeLead list
  TradeLead TradeLead[]

  // when the personal business automatically created when normal user register its true
  defaultBusiness Boolean @default(false)

  // owned business
  createdById String   @db.ObjectId
  createdBy   User     @relation("business", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isActive  Boolean @default(false)
  isDeleted Boolean @default(false)

  emdWalletCurrentAmount Float
  transactions           TransactionDetail[]
  tradeLeads             TradeLeadEmdWallets[]

  @@unique([createdById, defaultBusiness(true)])
}

model Profile {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  //* @TODO we need to specify the roles with the business types and remove the Business Type enum */
  profileType BusinessType
  status      UserStatus // owner verification pending, invited, active, otp verification pending, blocked

  //* A profile can have a role */
  //**  @TODO profile can have multiple roles */
  role Role

  // user profile relatioship 1-M
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  //** invitations mangement */
  invitatedById      String?          @db.ObjectId
  invitatedBy        Profile?         @relation("invitations", fields: [invitatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invitationStatus   InvitationStatus
  invitationHashCode String?
  invitationDate     DateTime?
  invitationExpiry   DateTime?

  createdInvitations Profile[] @relation("invitations")


  // profile business relatioship M-1
  businessId String?   @db.ObjectId
  business   Business? @relation(fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // profile businessUnit relatioship M-1
  businessUnitId String?       @db.ObjectId
  businessUnits  BusinessUnit? @relation(fields: [businessUnitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  @@unique([userId, businessId, businessUnitId])
}

// branch/warehouse/sub entity  -- only valid for QC
model BusinessUnit {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?

  businessUnitType BusinessUnitType

  address     Address?
  contactInfo contactInfo?
  status      BusinessStatus

  businessId String    @db.ObjectId
  business   Business  @relation(fields: [businessId], references: [id])
  profiles   Profile[]

  createdById String   @db.ObjectId
  cCreatedBy  User?    @relation("businessUnits", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  // wherehouse storage location relation ship
  TradeLead TradeLead[]
}

model Invoice {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  invoiceType InvoiceType

  invoiceNumber      String
  invoiceDate        DateTime
  invoiceAmount      Float
  GSTAmount          Float?              @default(0)
  TotalAmount        Float
  invoiceStatus      InvoiceStatus
  paymentStatus      PaymentStatus
  transactionDetails TransactionDetail[]

  //** invoice items */
  subscriptions PaymentSubscription[] @relation("invoices")
  topupPayments TopupPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  TradeLead TradeLead[]

  //** Invoice relations */
  Business   Business? @relation("business_invoices", fields: [businessId], references: [id])
  businessId String?   @db.ObjectId
}

model PaymentSubscription {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  //** Bussiness subscription */
  businessId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  subscriptionPlanId String            @db.ObjectId
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])

  status         SubscriptionStatus
  expiryDate     DateTime?
  remainingCount Int?

  //** Payment subscription Invoice */
  invoiceId                  String?  @db.ObjectId
  invoice                    Invoice? @relation("invoices", fields: [invoiceId], references: [id])
  //** Invoice Item details */
  subscriptionCount          Int?
  subscriptionValidityInDays Int?
  subscriptionAmount         Float?

  //** Topup Payment back relations*/
  TopupPayment    TopupPayment[] @relation(fields: [topupPaymentIds], references: [id])
  topupPaymentIds String[]       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model SubscriptionPlan {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  price          String?
  count          Int?
  validityInDays Int?

  //@TODO add the subscription type
  //** applicable coupons */
  couponIds String[] @db.ObjectId
  coupons   Coupon[] @relation(fields: [couponIds], references: [id])

  //** upgrade suggessions for subscription plans */
  upgradablePlans SubscriptionPlan[] @relation("upgradablePlans")
  basePlans       SubscriptionPlan?  @relation("upgradablePlans", fields: [basePlanIds], references: [id], onDelete: NoAction, onUpdate: NoAction)
  basePlanIds     String[]           @db.ObjectId

  paymentSubscriptions PaymentSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}

// ** Use normal subscription plan with a type is bettaer than  using Topup Payment & Topup Plan model*/
model TopupPayment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amount        Float
  paymentStatus PaymentStatus

  //** topup Payment  Invoice */
  invoiceId String?  @db.ObjectId
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  //** topup plan relation */
  topupPlanId String    @db.ObjectId
  topupPlan   TopupPlan @relation(fields: [topupPlanId], references: [id])

  //Subscription Payment Relation M-M
  paymentSubscriptionIds String[]              @db.ObjectId
  paymentSubscription    PaymentSubscription[] @relation(fields: [paymentSubscriptionIds], references: [id])

  //** topup bussiness invoice */
  businessId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}

model TopupPlan {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  price          String?
  count          Int?
  validityInDays Int?

  //@TODO add the subscription type
  //** applicable coupons */
  couponIds String[] @db.ObjectId
  coupons   Coupon[] @relation(fields: [couponIds], references: [id])

  //** dummy relation for prisma */
  topupPayments TopupPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}

model Coupon {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  couponCode   String
  description  String?
  couponType   CouponType
  couponValue  Float?
  couponCount  Int?
  couponStatus CouponStatus
  couponExpiry DateTime?

  //** Coupon applicable to subscription plans M-M*/
  subscriptionPlanIds String[]           @db.ObjectId
  subscriptionPlan    SubscriptionPlan[] @relation(fields: [subscriptionPlanIds], references: [id])

  //** Coupon applicable to topup plans M-M*/
  topupPlanIds String[]    @db.ObjectId
  topupPlan    TopupPlan[] @relation(fields: [topupPlanIds], references: [id])

  //** Coupon applicable to business , special coupons for perticular busines*/
  businessId String    @db.ObjectId
  business   Business? @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommodityMaster {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)

  commodityVarient CommodityVarient[]

  //** https://github.com/prisma/prisma/issues/12552 */
  favoriteUsers FavoriteCommodityMaster[]
}

model FavoriteCommodityMaster {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  userId            String          @db.ObjectId
  commodityMaster   CommodityMaster @relation(fields: [commodityMasterId], references: [id])
  commodityMasterId String          @db.ObjectId
  User              User            @relation(fields: [userId], references: [id])

  @@unique([userId, commodityMasterId])
}

model CommodityVarient {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       Doc?
  qcParams    QcParam[]


  //** Base CommodityMaster relation */
  commodityMasterId String          @db.ObjectId
  commodityMaster   CommodityMaster @relation(fields: [commodityMasterId], references: [id])
  TradeLeads        TradeLead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
}

model TradeLead {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  images      Doc[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  tradeType   TradeType

  measurementUnit       MeasurementUnit
  lotSize               Float
  quantity              Float
  location              Address
  qcParams              QcParam[]
  weight                Float
  // weightUnit            String
  qualityCertificateImg String?
  commodityMasterImage  String
  emdValue              Float
  emdUnit               emdUnit
  TradeLeadEmds         TradeLeadEmdWallets[]


  wareHouseId String       @db.ObjectId
  wareHouse   BusinessUnit @relation(fields: [wareHouseId], references: [id])

  sampleImages String[]

  commodityVarient   CommodityVarient @relation(fields: [commodityVarientId], references: [id])
  commodityVarientId String           @db.ObjectId

  shipmentPaln ShipmentPlan?

  pricePerUnit     Float
  accountInfo      String[]
  billingAddress   Address
  isPaymentSuccess Boolean

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  //** Created/Owner details relation */
  businessId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  fromRequest TradeRequest[] @relation("from")
  toRequest   TradeRequest[] @relation("to")

}

model TradeLeadEmdWallets {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  emdValue    Float
  transaction TransactionDetail? @relation("emdTransactionDetail")

  tradeLeadId String    @db.ObjectId
  tradeLead   TradeLead @relation(fields: [tradeLeadId], references: [id])

  bssinessId String   @db.ObjectId
  emd        Business @relation(fields: [bssinessId], references: [id])

  @@unique([tradeLeadId, bssinessId])
}

model TradeRequest {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  fromTradeLeadId String    @db.ObjectId
  fromTreadLead   TradeLead @relation("from", fields: [fromTradeLeadId], references: [id])
  toTradeLeadId   String    @db.ObjectId
  toTradeLead     TradeLead @relation("to", fields: [toTradeLeadId], references: [id])

  direction TradeDirection
  status    TradeRequestStatus

  measurementunit MeasurementUnit
  lotSize         Float?
  quantity        Int
  priceperunit    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)

  // for reference only from the UI prespective
  location     Address
  TradeExecton TradeExecton? @relation("TradeExecton")
}

// TradeExecton is not complited
model TradeExecton {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  tradeRequestId String       @unique @db.ObjectId
  tradeRequest   TradeRequest @relation("TradeExecton", fields: [tradeRequestId], references: [id])

  docs            Doc[]
  status          TradeExectonStatus
  shippingAddress Address


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)

  // for reference only from the UI prespective
  location Address

}

model QcParameterMaster {
  id String @id @default(auto()) @map("_id") @db.ObjectId

}

type QcParam {
  name           String
  baseValue      Float
  rejectionValue Float
  qcParamType    QcParamType
  mastedId       String?     @db.ObjectId
}

model TransactionDetail {

  id String @id @default(auto()) @map("_id") @db.ObjectId

  transactionStatus    TransactionStatus
  transactionAmount    Float
  transactionDate      DateTime
  transactionType      TransactionType
  transactionMode      TransactionMode
  transactionObjective TransactionObjective

  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?  @db.ObjectId

  Emd            TradeLeadEmdWallets? @relation("emdTransactionDetail", fields: [emdBissinessId], references: [id])
  emdBissinessId String?              @unique @db.ObjectId
  Business       Business?            @relation(fields: [businessId], references: [id])
  businessId     String?              @db.ObjectId
}

type ContactNumber {
  type       String
  number     String
  isVerified Boolean @default(false)
}

type Address {
  label        String
  addressLine1 String
  addressLine2 String?
  houseNo      String?
  BuildingName String?
  landMark     String?
  city         String
  state        String
  country      String
  pincode      String
  isPrimary    Boolean @default(false)
}

type Doc {
  image      String?
  number     String
  isVerified Boolean @default(false)
}

type contactInfo {
  contact     ContactNumber[]
  socialMedia SocialMedia?
  email       String?
  website     String?
  latitude    String?
  longitude   String?
}

type SocialMedia {
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  googlePlus String?
  youtube    String?
}

type ShipmentPlan {
  days Int
  lots Int
}

enum InvitationStatus {
  NotRequired
  PendingOwnerApproval
  PendingUserApproval
  Accepted
  Rejected
  Expired
}

enum BusinessUnitType {
  Branch
  Warehouse
  SubEntity
}

enum UserStatus {
  active
  blocked
  invited
  ownerVerificationPending
  otpVerificationPending
}

enum BusinessStatus {
  Active
  Deleted
  Approved
  Rejected
  Blocked
  Draft
  Pending
  Closed
  Inactive
}

enum SubscriptionStatus {
  Expired
  Active
  Deleted
  PaymentPending
  PaymentFailed
  Closed
  Inactive
}

enum BusinessType {
  QC
  Listing
  Trading
}

enum Role {
  Owner
  Manager
  TradingManager
  ListingManager
  Trader
  Agent
  WarehouseManager
  QCAnalysit
  QCApprover
}

enum InvoiceStatus {
  Draft
  Paid
  Cancelled
  Rejected
  Pending
  Closed
  Inactive
}

enum PaymentStatus {
  Pending
  Success
  Failed
  Cancelled
  Expired
}

enum TransactionMode {
  Online
  Offline
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  Success
  Failed
  Cancelled
  Expired
}

enum CouponType {
  Percentage
  Fixed
}

enum CouponStatus {
  Active
  Expired
  Used
  Deleted
}

enum MeasurementUnit {
  Kilogram
  Gram
  Ton
  Piece
  Box
  Litter
}

enum InvoiceType {
  // add new types here
  BuyBid
  SellOffer
  Topup
  Subscription
}

enum emdUnit {
  Percentage
  Fixed
}

enum TradeType {
  SellOffer
  BuyBid
}

enum QcParamType {
  custom
  standard
}

enum TradeRequestStatus {
  Pending
  Accepted
  Rejected
}

enum TradeDirection {
  BuyBidToSellOffer
  SellOfferToBuyBid
}

enum TradeExectonStatus {
  Deliverd
  OnGoing
}

enum TransactionObjective {
  Payment
  Refund
}

enum UserType {
  NormalUser
  BusinessUser
  BussinessOwner
}

// Its defines the the default bussiness (personal user ) and custom user created bussiness
enum ModeOfBusiness {
  personal
  business
}

enum Language {
  English
  Hindi
  Marathi
  Gujarati
  Punjabi
  Telugu
  Tamil
  Kannada
  Malayalam
  Assamese
  Odia
  Bengali
  Kashmiri
  Nepali
}

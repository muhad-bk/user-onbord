# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  isPrimary: Boolean!
  pincode: String!
  state: String!
  type: String!
}

input AddressCreateInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  isPrimary: Boolean
  pincode: String!
  state: String!
  type: String!
}

input AddressNullableCompositeFilter {
  equals: AddressObjectEqualityInput
  is: AddressWhereInput
  isNot: AddressWhereInput
  isSet: Boolean
}

input AddressNullableCreateEnvelopeInput {
  set: AddressCreateInput
}

input AddressNullableUpdateEnvelopeInput {
  set: AddressCreateInput
  unset: Boolean
  upsert: AddressUpsertInput
}

input AddressObjectEqualityInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  isPrimary: Boolean!
  pincode: String!
  state: String!
  type: String!
}

input AddressOrderByCompositeAggregateInput {
  _count: SortOrder
}

input AddressOrderByInput {
  addressLine1: SortOrder
  addressLine2: SortOrder
  city: SortOrder
  country: SortOrder
  isPrimary: SortOrder
  pincode: SortOrder
  state: SortOrder
  type: SortOrder
}

input AddressUpdateInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  isPrimary: BoolFieldUpdateOperationsInput
  pincode: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AddressUpsertInput {
  set: AddressCreateInput!
  update: AddressUpdateInput!
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressLine1: StringFilter
  addressLine2: StringNullableFilter
  city: StringFilter
  country: StringFilter
  isPrimary: BoolFilter
  pincode: StringFilter
  state: StringFilter
  type: StringFilter
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateBussiness {
  _count: BussinessCountAggregate
  _max: BussinessMaxAggregate
  _min: BussinessMinAggregate
}

type AggregateBussinessUnit {
  _count: BussinessUnitCountAggregate
  _max: BussinessUnitMaxAggregate
  _min: BussinessUnitMinAggregate
}

type AggregatePaymentSubscription {
  _count: PaymentSubscriptionCountAggregate
  _max: PaymentSubscriptionMaxAggregate
  _min: PaymentSubscriptionMinAggregate
}

type AggregateProfile {
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
}

type AggregateSubscriptionType {
  _avg: SubscriptionTypeAvgAggregate
  _count: SubscriptionTypeCountAggregate
  _max: SubscriptionTypeMaxAggregate
  _min: SubscriptionTypeMinAggregate
  _sum: SubscriptionTypeSumAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Bussiness {
  GSTIN: String!
  _count: BussinessCount
  address: Address
  bussinessUnits(cursor: BussinessUnitWhereUniqueInput, distinct: [BussinessUnitScalarFieldEnum!], orderBy: [BussinessUnitOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessUnitWhereInput): [BussinessUnit!]!
  constitution: String
  contactInfo: ContactInfo
  createdAt: DateTime!
  createdBy: User!
  createdById: String!
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String!
  image: String
  leagalName: String!
  paymentSubscription(cursor: PaymentSubscriptionWhereUniqueInput, distinct: [PaymentSubscriptionScalarFieldEnum!], orderBy: [PaymentSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentSubscriptionWhereInput): [PaymentSubscription!]!
  profiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  status: BussinessStatus!
  updatedAt: DateTime!
}

type BussinessCount {
  bussinessUnits: Int!
  paymentSubscription: Int!
  profiles: Int!
}

type BussinessCountAggregate {
  GSTIN: Int!
  _all: Int!
  constitution: Int!
  createdAt: Int!
  createdById: Int!
  dateOfIncorporation: Int!
  description: Int!
  displayName: Int!
  id: Int!
  image: Int!
  leagalName: Int!
  status: Int!
  updatedAt: Int!
}

input BussinessCountOrderByAggregateInput {
  GSTIN: SortOrder
  constitution: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  dateOfIncorporation: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  image: SortOrder
  leagalName: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessCreateInput {
  GSTIN: String!
  address: AddressNullableCreateEnvelopeInput
  bussinessUnits: BussinessUnitCreateNestedManyWithoutBussinessInput
  constitution: String
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedBussinessInput!
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String
  image: String
  leagalName: String!
  paymentSubscription: PaymentSubscriptionCreateNestedManyWithoutBussinessInput
  profiles: ProfileCreateNestedManyWithoutBussinessInput
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessCreateManyCreatedByInput {
  GSTIN: String!
  address: AddressNullableCreateEnvelopeInput
  constitution: String
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String
  image: String
  leagalName: String!
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessCreateManyCreatedByInputEnvelope {
  data: [BussinessCreateManyCreatedByInput!]!
}

input BussinessCreateManyInput {
  GSTIN: String!
  address: AddressNullableCreateEnvelopeInput
  constitution: String
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  createdById: String!
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String
  image: String
  leagalName: String!
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessCreateNestedManyWithoutCreatedByInput {
  connect: [BussinessWhereUniqueInput!]
  connectOrCreate: [BussinessCreateOrConnectWithoutCreatedByInput!]
  create: [BussinessCreateWithoutCreatedByInput!]
  createMany: BussinessCreateManyCreatedByInputEnvelope
}

input BussinessCreateNestedOneWithoutBussinessUnitsInput {
  connect: BussinessWhereUniqueInput
  connectOrCreate: BussinessCreateOrConnectWithoutBussinessUnitsInput
  create: BussinessCreateWithoutBussinessUnitsInput
}

input BussinessCreateNestedOneWithoutPaymentSubscriptionInput {
  connect: BussinessWhereUniqueInput
  connectOrCreate: BussinessCreateOrConnectWithoutPaymentSubscriptionInput
  create: BussinessCreateWithoutPaymentSubscriptionInput
}

input BussinessCreateNestedOneWithoutProfilesInput {
  connect: BussinessWhereUniqueInput
  connectOrCreate: BussinessCreateOrConnectWithoutProfilesInput
  create: BussinessCreateWithoutProfilesInput
}

input BussinessCreateOrConnectWithoutBussinessUnitsInput {
  create: BussinessCreateWithoutBussinessUnitsInput!
  where: BussinessWhereUniqueInput!
}

input BussinessCreateOrConnectWithoutCreatedByInput {
  create: BussinessCreateWithoutCreatedByInput!
  where: BussinessWhereUniqueInput!
}

input BussinessCreateOrConnectWithoutPaymentSubscriptionInput {
  create: BussinessCreateWithoutPaymentSubscriptionInput!
  where: BussinessWhereUniqueInput!
}

input BussinessCreateOrConnectWithoutProfilesInput {
  create: BussinessCreateWithoutProfilesInput!
  where: BussinessWhereUniqueInput!
}

input BussinessCreateWithoutBussinessUnitsInput {
  GSTIN: String!
  address: AddressNullableCreateEnvelopeInput
  constitution: String
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedBussinessInput!
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String
  image: String
  leagalName: String!
  paymentSubscription: PaymentSubscriptionCreateNestedManyWithoutBussinessInput
  profiles: ProfileCreateNestedManyWithoutBussinessInput
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessCreateWithoutCreatedByInput {
  GSTIN: String!
  address: AddressNullableCreateEnvelopeInput
  bussinessUnits: BussinessUnitCreateNestedManyWithoutBussinessInput
  constitution: String
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String
  image: String
  leagalName: String!
  paymentSubscription: PaymentSubscriptionCreateNestedManyWithoutBussinessInput
  profiles: ProfileCreateNestedManyWithoutBussinessInput
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessCreateWithoutPaymentSubscriptionInput {
  GSTIN: String!
  address: AddressNullableCreateEnvelopeInput
  bussinessUnits: BussinessUnitCreateNestedManyWithoutBussinessInput
  constitution: String
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedBussinessInput!
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String
  image: String
  leagalName: String!
  profiles: ProfileCreateNestedManyWithoutBussinessInput
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessCreateWithoutProfilesInput {
  GSTIN: String!
  address: AddressNullableCreateEnvelopeInput
  bussinessUnits: BussinessUnitCreateNestedManyWithoutBussinessInput
  constitution: String
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedBussinessInput!
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String
  image: String
  leagalName: String!
  paymentSubscription: PaymentSubscriptionCreateNestedManyWithoutBussinessInput
  status: BussinessStatus!
  updatedAt: DateTime
}

type BussinessGroupBy {
  GSTIN: String!
  _count: BussinessCountAggregate
  _max: BussinessMaxAggregate
  _min: BussinessMinAggregate
  constitution: String
  createdAt: DateTime!
  createdById: String!
  dateOfIncorporation: DateTime
  description: String
  displayName: String!
  id: String!
  image: String
  leagalName: String!
  status: BussinessStatus!
  updatedAt: DateTime!
}

input BussinessListRelationFilter {
  every: BussinessWhereInput
  none: BussinessWhereInput
  some: BussinessWhereInput
}

type BussinessMaxAggregate {
  GSTIN: String
  constitution: String
  createdAt: DateTime
  createdById: String
  dateOfIncorporation: DateTime
  description: String
  displayName: String
  id: String
  image: String
  leagalName: String
  status: BussinessStatus
  updatedAt: DateTime
}

input BussinessMaxOrderByAggregateInput {
  GSTIN: SortOrder
  constitution: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  dateOfIncorporation: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  image: SortOrder
  leagalName: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type BussinessMinAggregate {
  GSTIN: String
  constitution: String
  createdAt: DateTime
  createdById: String
  dateOfIncorporation: DateTime
  description: String
  displayName: String
  id: String
  image: String
  leagalName: String
  status: BussinessStatus
  updatedAt: DateTime
}

input BussinessMinOrderByAggregateInput {
  GSTIN: SortOrder
  constitution: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  dateOfIncorporation: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  image: SortOrder
  leagalName: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessOrderByRelationAggregateInput {
  _count: SortOrder
}

input BussinessOrderByWithAggregationInput {
  GSTIN: SortOrder
  _count: BussinessCountOrderByAggregateInput
  _max: BussinessMaxOrderByAggregateInput
  _min: BussinessMinOrderByAggregateInput
  constitution: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  dateOfIncorporation: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  image: SortOrder
  leagalName: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessOrderByWithRelationInput {
  GSTIN: SortOrder
  address: AddressOrderByInput
  bussinessUnits: BussinessUnitOrderByRelationAggregateInput
  constitution: SortOrder
  contactInfo: ContactInfoOrderByInput
  createdAt: SortOrder
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  dateOfIncorporation: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  image: SortOrder
  leagalName: SortOrder
  paymentSubscription: PaymentSubscriptionOrderByRelationAggregateInput
  profiles: ProfileOrderByRelationAggregateInput
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessRelationFilter {
  is: BussinessWhereInput
  isNot: BussinessWhereInput
}

enum BussinessScalarFieldEnum {
  GSTIN
  constitution
  createdAt
  createdById
  dateOfIncorporation
  description
  displayName
  id
  image
  leagalName
  status
  updatedAt
}

input BussinessScalarWhereInput {
  AND: [BussinessScalarWhereInput!]
  GSTIN: StringFilter
  NOT: [BussinessScalarWhereInput!]
  OR: [BussinessScalarWhereInput!]
  constitution: StringNullableFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  dateOfIncorporation: DateTimeNullableFilter
  description: StringNullableFilter
  displayName: StringFilter
  id: StringFilter
  image: StringNullableFilter
  leagalName: StringFilter
  status: EnumBussinessStatusFilter
  updatedAt: DateTimeFilter
}

input BussinessScalarWhereWithAggregatesInput {
  AND: [BussinessScalarWhereWithAggregatesInput!]
  GSTIN: StringWithAggregatesFilter
  NOT: [BussinessScalarWhereWithAggregatesInput!]
  OR: [BussinessScalarWhereWithAggregatesInput!]
  constitution: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  createdById: StringWithAggregatesFilter
  dateOfIncorporation: DateTimeNullableWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  displayName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  leagalName: StringWithAggregatesFilter
  status: EnumBussinessStatusWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum BussinessStatus {
  Active
  Approved
  Blocked
  Closed
  Deleted
  Draft
  Inactive
  Pending
  Rejected
}

enum BussinessType {
  Listing
  QC
  Trading
}

type BussinessUnit {
  _count: BussinessUnitCount
  address: Address
  bussiness: Bussiness!
  bussinessId: String!
  bussinessUnitType: BussinessUnitType!
  cCreatedBy: User
  contactInfo: ContactInfo
  createdAt: DateTime!
  createdById: String!
  description: String
  id: String!
  image: String
  name: String!
  profiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  status: BussinessStatus!
  updatedAt: DateTime!
}

type BussinessUnitCount {
  profiles: Int!
}

type BussinessUnitCountAggregate {
  _all: Int!
  bussinessId: Int!
  bussinessUnitType: Int!
  createdAt: Int!
  createdById: Int!
  description: Int!
  id: Int!
  image: Int!
  name: Int!
  status: Int!
  updatedAt: Int!
}

input BussinessUnitCountOrderByAggregateInput {
  bussinessId: SortOrder
  bussinessUnitType: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessUnitCreateInput {
  address: AddressNullableCreateEnvelopeInput
  bussiness: BussinessCreateNestedOneWithoutBussinessUnitsInput!
  bussinessUnitType: BussinessUnitType!
  cCreatedBy: UserCreateNestedOneWithoutCraetedBussinessUnitsInput
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  description: String
  id: String
  image: String
  name: String!
  profiles: ProfileCreateNestedManyWithoutBussinessUnitsInput
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessUnitCreateManyBussinessInput {
  address: AddressNullableCreateEnvelopeInput
  bussinessUnitType: BussinessUnitType!
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  createdById: String!
  description: String
  id: String
  image: String
  name: String!
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessUnitCreateManyBussinessInputEnvelope {
  data: [BussinessUnitCreateManyBussinessInput!]!
}

input BussinessUnitCreateManyCCreatedByInput {
  address: AddressNullableCreateEnvelopeInput
  bussinessId: String!
  bussinessUnitType: BussinessUnitType!
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  description: String
  id: String
  image: String
  name: String!
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessUnitCreateManyCCreatedByInputEnvelope {
  data: [BussinessUnitCreateManyCCreatedByInput!]!
}

input BussinessUnitCreateManyInput {
  address: AddressNullableCreateEnvelopeInput
  bussinessId: String!
  bussinessUnitType: BussinessUnitType!
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  createdById: String!
  description: String
  id: String
  image: String
  name: String!
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessUnitCreateNestedManyWithoutBussinessInput {
  connect: [BussinessUnitWhereUniqueInput!]
  connectOrCreate: [BussinessUnitCreateOrConnectWithoutBussinessInput!]
  create: [BussinessUnitCreateWithoutBussinessInput!]
  createMany: BussinessUnitCreateManyBussinessInputEnvelope
}

input BussinessUnitCreateNestedManyWithoutCCreatedByInput {
  connect: [BussinessUnitWhereUniqueInput!]
  connectOrCreate: [BussinessUnitCreateOrConnectWithoutCCreatedByInput!]
  create: [BussinessUnitCreateWithoutCCreatedByInput!]
  createMany: BussinessUnitCreateManyCCreatedByInputEnvelope
}

input BussinessUnitCreateNestedOneWithoutProfilesInput {
  connect: BussinessUnitWhereUniqueInput
  connectOrCreate: BussinessUnitCreateOrConnectWithoutProfilesInput
  create: BussinessUnitCreateWithoutProfilesInput
}

input BussinessUnitCreateOrConnectWithoutBussinessInput {
  create: BussinessUnitCreateWithoutBussinessInput!
  where: BussinessUnitWhereUniqueInput!
}

input BussinessUnitCreateOrConnectWithoutCCreatedByInput {
  create: BussinessUnitCreateWithoutCCreatedByInput!
  where: BussinessUnitWhereUniqueInput!
}

input BussinessUnitCreateOrConnectWithoutProfilesInput {
  create: BussinessUnitCreateWithoutProfilesInput!
  where: BussinessUnitWhereUniqueInput!
}

input BussinessUnitCreateWithoutBussinessInput {
  address: AddressNullableCreateEnvelopeInput
  bussinessUnitType: BussinessUnitType!
  cCreatedBy: UserCreateNestedOneWithoutCraetedBussinessUnitsInput
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  description: String
  id: String
  image: String
  name: String!
  profiles: ProfileCreateNestedManyWithoutBussinessUnitsInput
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessUnitCreateWithoutCCreatedByInput {
  address: AddressNullableCreateEnvelopeInput
  bussiness: BussinessCreateNestedOneWithoutBussinessUnitsInput!
  bussinessUnitType: BussinessUnitType!
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  description: String
  id: String
  image: String
  name: String!
  profiles: ProfileCreateNestedManyWithoutBussinessUnitsInput
  status: BussinessStatus!
  updatedAt: DateTime
}

input BussinessUnitCreateWithoutProfilesInput {
  address: AddressNullableCreateEnvelopeInput
  bussiness: BussinessCreateNestedOneWithoutBussinessUnitsInput!
  bussinessUnitType: BussinessUnitType!
  cCreatedBy: UserCreateNestedOneWithoutCraetedBussinessUnitsInput
  contactInfo: contactInfoNullableCreateEnvelopeInput
  createdAt: DateTime
  description: String
  id: String
  image: String
  name: String!
  status: BussinessStatus!
  updatedAt: DateTime
}

type BussinessUnitGroupBy {
  _count: BussinessUnitCountAggregate
  _max: BussinessUnitMaxAggregate
  _min: BussinessUnitMinAggregate
  bussinessId: String!
  bussinessUnitType: BussinessUnitType!
  createdAt: DateTime!
  createdById: String!
  description: String
  id: String!
  image: String
  name: String!
  status: BussinessStatus!
  updatedAt: DateTime!
}

input BussinessUnitListRelationFilter {
  every: BussinessUnitWhereInput
  none: BussinessUnitWhereInput
  some: BussinessUnitWhereInput
}

type BussinessUnitMaxAggregate {
  bussinessId: String
  bussinessUnitType: BussinessUnitType
  createdAt: DateTime
  createdById: String
  description: String
  id: String
  image: String
  name: String
  status: BussinessStatus
  updatedAt: DateTime
}

input BussinessUnitMaxOrderByAggregateInput {
  bussinessId: SortOrder
  bussinessUnitType: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type BussinessUnitMinAggregate {
  bussinessId: String
  bussinessUnitType: BussinessUnitType
  createdAt: DateTime
  createdById: String
  description: String
  id: String
  image: String
  name: String
  status: BussinessStatus
  updatedAt: DateTime
}

input BussinessUnitMinOrderByAggregateInput {
  bussinessId: SortOrder
  bussinessUnitType: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessUnitOrderByRelationAggregateInput {
  _count: SortOrder
}

input BussinessUnitOrderByWithAggregationInput {
  _count: BussinessUnitCountOrderByAggregateInput
  _max: BussinessUnitMaxOrderByAggregateInput
  _min: BussinessUnitMinOrderByAggregateInput
  bussinessId: SortOrder
  bussinessUnitType: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessUnitOrderByWithRelationInput {
  address: AddressOrderByInput
  bussiness: BussinessOrderByWithRelationInput
  bussinessId: SortOrder
  bussinessUnitType: SortOrder
  cCreatedBy: UserOrderByWithRelationInput
  contactInfo: ContactInfoOrderByInput
  createdAt: SortOrder
  createdById: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  profiles: ProfileOrderByRelationAggregateInput
  status: SortOrder
  updatedAt: SortOrder
}

input BussinessUnitRelationFilter {
  is: BussinessUnitWhereInput
  isNot: BussinessUnitWhereInput
}

enum BussinessUnitScalarFieldEnum {
  bussinessId
  bussinessUnitType
  createdAt
  createdById
  description
  id
  image
  name
  status
  updatedAt
}

input BussinessUnitScalarWhereInput {
  AND: [BussinessUnitScalarWhereInput!]
  NOT: [BussinessUnitScalarWhereInput!]
  OR: [BussinessUnitScalarWhereInput!]
  bussinessId: StringFilter
  bussinessUnitType: EnumBussinessUnitTypeFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  description: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringFilter
  status: EnumBussinessStatusFilter
  updatedAt: DateTimeFilter
}

input BussinessUnitScalarWhereWithAggregatesInput {
  AND: [BussinessUnitScalarWhereWithAggregatesInput!]
  NOT: [BussinessUnitScalarWhereWithAggregatesInput!]
  OR: [BussinessUnitScalarWhereWithAggregatesInput!]
  bussinessId: StringWithAggregatesFilter
  bussinessUnitType: EnumBussinessUnitTypeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  createdById: StringWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  status: EnumBussinessStatusWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum BussinessUnitType {
  Branch
  SubEntity
  Warehouse
}

input BussinessUnitUpdateInput {
  address: AddressNullableUpdateEnvelopeInput
  bussiness: BussinessUpdateOneRequiredWithoutBussinessUnitsInput
  bussinessUnitType: EnumBussinessUnitTypeFieldUpdateOperationsInput
  cCreatedBy: UserUpdateOneWithoutCraetedBussinessUnitsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutBussinessUnitsInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUnitUpdateManyMutationInput {
  address: AddressNullableUpdateEnvelopeInput
  bussinessUnitType: EnumBussinessUnitTypeFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUnitUpdateManyWithWhereWithoutBussinessInput {
  data: BussinessUnitUpdateManyMutationInput!
  where: BussinessUnitScalarWhereInput!
}

input BussinessUnitUpdateManyWithWhereWithoutCCreatedByInput {
  data: BussinessUnitUpdateManyMutationInput!
  where: BussinessUnitScalarWhereInput!
}

input BussinessUnitUpdateManyWithoutBussinessInput {
  connect: [BussinessUnitWhereUniqueInput!]
  connectOrCreate: [BussinessUnitCreateOrConnectWithoutBussinessInput!]
  create: [BussinessUnitCreateWithoutBussinessInput!]
  createMany: BussinessUnitCreateManyBussinessInputEnvelope
  delete: [BussinessUnitWhereUniqueInput!]
  deleteMany: [BussinessUnitScalarWhereInput!]
  disconnect: [BussinessUnitWhereUniqueInput!]
  set: [BussinessUnitWhereUniqueInput!]
  update: [BussinessUnitUpdateWithWhereUniqueWithoutBussinessInput!]
  updateMany: [BussinessUnitUpdateManyWithWhereWithoutBussinessInput!]
  upsert: [BussinessUnitUpsertWithWhereUniqueWithoutBussinessInput!]
}

input BussinessUnitUpdateManyWithoutCCreatedByInput {
  connect: [BussinessUnitWhereUniqueInput!]
  connectOrCreate: [BussinessUnitCreateOrConnectWithoutCCreatedByInput!]
  create: [BussinessUnitCreateWithoutCCreatedByInput!]
  createMany: BussinessUnitCreateManyCCreatedByInputEnvelope
  delete: [BussinessUnitWhereUniqueInput!]
  deleteMany: [BussinessUnitScalarWhereInput!]
  disconnect: [BussinessUnitWhereUniqueInput!]
  set: [BussinessUnitWhereUniqueInput!]
  update: [BussinessUnitUpdateWithWhereUniqueWithoutCCreatedByInput!]
  updateMany: [BussinessUnitUpdateManyWithWhereWithoutCCreatedByInput!]
  upsert: [BussinessUnitUpsertWithWhereUniqueWithoutCCreatedByInput!]
}

input BussinessUnitUpdateOneWithoutProfilesInput {
  connect: BussinessUnitWhereUniqueInput
  connectOrCreate: BussinessUnitCreateOrConnectWithoutProfilesInput
  create: BussinessUnitCreateWithoutProfilesInput
  delete: Boolean
  disconnect: Boolean
  update: BussinessUnitUpdateWithoutProfilesInput
  upsert: BussinessUnitUpsertWithoutProfilesInput
}

input BussinessUnitUpdateWithWhereUniqueWithoutBussinessInput {
  data: BussinessUnitUpdateWithoutBussinessInput!
  where: BussinessUnitWhereUniqueInput!
}

input BussinessUnitUpdateWithWhereUniqueWithoutCCreatedByInput {
  data: BussinessUnitUpdateWithoutCCreatedByInput!
  where: BussinessUnitWhereUniqueInput!
}

input BussinessUnitUpdateWithoutBussinessInput {
  address: AddressNullableUpdateEnvelopeInput
  bussinessUnitType: EnumBussinessUnitTypeFieldUpdateOperationsInput
  cCreatedBy: UserUpdateOneWithoutCraetedBussinessUnitsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutBussinessUnitsInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUnitUpdateWithoutCCreatedByInput {
  address: AddressNullableUpdateEnvelopeInput
  bussiness: BussinessUpdateOneRequiredWithoutBussinessUnitsInput
  bussinessUnitType: EnumBussinessUnitTypeFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutBussinessUnitsInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUnitUpdateWithoutProfilesInput {
  address: AddressNullableUpdateEnvelopeInput
  bussiness: BussinessUpdateOneRequiredWithoutBussinessUnitsInput
  bussinessUnitType: EnumBussinessUnitTypeFieldUpdateOperationsInput
  cCreatedBy: UserUpdateOneWithoutCraetedBussinessUnitsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUnitUpsertWithWhereUniqueWithoutBussinessInput {
  create: BussinessUnitCreateWithoutBussinessInput!
  update: BussinessUnitUpdateWithoutBussinessInput!
  where: BussinessUnitWhereUniqueInput!
}

input BussinessUnitUpsertWithWhereUniqueWithoutCCreatedByInput {
  create: BussinessUnitCreateWithoutCCreatedByInput!
  update: BussinessUnitUpdateWithoutCCreatedByInput!
  where: BussinessUnitWhereUniqueInput!
}

input BussinessUnitUpsertWithoutProfilesInput {
  create: BussinessUnitCreateWithoutProfilesInput!
  update: BussinessUnitUpdateWithoutProfilesInput!
}

input BussinessUnitWhereInput {
  AND: [BussinessUnitWhereInput!]
  NOT: [BussinessUnitWhereInput!]
  OR: [BussinessUnitWhereInput!]
  address: AddressNullableCompositeFilter
  bussiness: BussinessRelationFilter
  bussinessId: StringFilter
  bussinessUnitType: EnumBussinessUnitTypeFilter
  cCreatedBy: UserRelationFilter
  contactInfo: ContactInfoNullableCompositeFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  description: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringFilter
  profiles: ProfileListRelationFilter
  status: EnumBussinessStatusFilter
  updatedAt: DateTimeFilter
}

input BussinessUnitWhereUniqueInput {
  id: String
}

input BussinessUpdateInput {
  GSTIN: StringFieldUpdateOperationsInput
  address: AddressNullableUpdateEnvelopeInput
  bussinessUnits: BussinessUnitUpdateManyWithoutBussinessInput
  constitution: NullableStringFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutCreatedBussinessInput
  dateOfIncorporation: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  leagalName: StringFieldUpdateOperationsInput
  paymentSubscription: PaymentSubscriptionUpdateManyWithoutBussinessInput
  profiles: ProfileUpdateManyWithoutBussinessInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUpdateManyMutationInput {
  GSTIN: StringFieldUpdateOperationsInput
  address: AddressNullableUpdateEnvelopeInput
  constitution: NullableStringFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfIncorporation: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  leagalName: StringFieldUpdateOperationsInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUpdateManyWithWhereWithoutCreatedByInput {
  data: BussinessUpdateManyMutationInput!
  where: BussinessScalarWhereInput!
}

input BussinessUpdateManyWithoutCreatedByInput {
  connect: [BussinessWhereUniqueInput!]
  connectOrCreate: [BussinessCreateOrConnectWithoutCreatedByInput!]
  create: [BussinessCreateWithoutCreatedByInput!]
  createMany: BussinessCreateManyCreatedByInputEnvelope
  delete: [BussinessWhereUniqueInput!]
  deleteMany: [BussinessScalarWhereInput!]
  disconnect: [BussinessWhereUniqueInput!]
  set: [BussinessWhereUniqueInput!]
  update: [BussinessUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [BussinessUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [BussinessUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BussinessUpdateOneRequiredWithoutBussinessUnitsInput {
  connect: BussinessWhereUniqueInput
  connectOrCreate: BussinessCreateOrConnectWithoutBussinessUnitsInput
  create: BussinessCreateWithoutBussinessUnitsInput
  update: BussinessUpdateWithoutBussinessUnitsInput
  upsert: BussinessUpsertWithoutBussinessUnitsInput
}

input BussinessUpdateOneRequiredWithoutPaymentSubscriptionInput {
  connect: BussinessWhereUniqueInput
  connectOrCreate: BussinessCreateOrConnectWithoutPaymentSubscriptionInput
  create: BussinessCreateWithoutPaymentSubscriptionInput
  update: BussinessUpdateWithoutPaymentSubscriptionInput
  upsert: BussinessUpsertWithoutPaymentSubscriptionInput
}

input BussinessUpdateOneWithoutProfilesInput {
  connect: BussinessWhereUniqueInput
  connectOrCreate: BussinessCreateOrConnectWithoutProfilesInput
  create: BussinessCreateWithoutProfilesInput
  delete: Boolean
  disconnect: Boolean
  update: BussinessUpdateWithoutProfilesInput
  upsert: BussinessUpsertWithoutProfilesInput
}

input BussinessUpdateWithWhereUniqueWithoutCreatedByInput {
  data: BussinessUpdateWithoutCreatedByInput!
  where: BussinessWhereUniqueInput!
}

input BussinessUpdateWithoutBussinessUnitsInput {
  GSTIN: StringFieldUpdateOperationsInput
  address: AddressNullableUpdateEnvelopeInput
  constitution: NullableStringFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutCreatedBussinessInput
  dateOfIncorporation: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  leagalName: StringFieldUpdateOperationsInput
  paymentSubscription: PaymentSubscriptionUpdateManyWithoutBussinessInput
  profiles: ProfileUpdateManyWithoutBussinessInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUpdateWithoutCreatedByInput {
  GSTIN: StringFieldUpdateOperationsInput
  address: AddressNullableUpdateEnvelopeInput
  bussinessUnits: BussinessUnitUpdateManyWithoutBussinessInput
  constitution: NullableStringFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfIncorporation: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  leagalName: StringFieldUpdateOperationsInput
  paymentSubscription: PaymentSubscriptionUpdateManyWithoutBussinessInput
  profiles: ProfileUpdateManyWithoutBussinessInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUpdateWithoutPaymentSubscriptionInput {
  GSTIN: StringFieldUpdateOperationsInput
  address: AddressNullableUpdateEnvelopeInput
  bussinessUnits: BussinessUnitUpdateManyWithoutBussinessInput
  constitution: NullableStringFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutCreatedBussinessInput
  dateOfIncorporation: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  leagalName: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutBussinessInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUpdateWithoutProfilesInput {
  GSTIN: StringFieldUpdateOperationsInput
  address: AddressNullableUpdateEnvelopeInput
  bussinessUnits: BussinessUnitUpdateManyWithoutBussinessInput
  constitution: NullableStringFieldUpdateOperationsInput
  contactInfo: contactInfoNullableUpdateEnvelopeInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutCreatedBussinessInput
  dateOfIncorporation: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  leagalName: StringFieldUpdateOperationsInput
  paymentSubscription: PaymentSubscriptionUpdateManyWithoutBussinessInput
  status: EnumBussinessStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BussinessUpsertWithWhereUniqueWithoutCreatedByInput {
  create: BussinessCreateWithoutCreatedByInput!
  update: BussinessUpdateWithoutCreatedByInput!
  where: BussinessWhereUniqueInput!
}

input BussinessUpsertWithoutBussinessUnitsInput {
  create: BussinessCreateWithoutBussinessUnitsInput!
  update: BussinessUpdateWithoutBussinessUnitsInput!
}

input BussinessUpsertWithoutPaymentSubscriptionInput {
  create: BussinessCreateWithoutPaymentSubscriptionInput!
  update: BussinessUpdateWithoutPaymentSubscriptionInput!
}

input BussinessUpsertWithoutProfilesInput {
  create: BussinessCreateWithoutProfilesInput!
  update: BussinessUpdateWithoutProfilesInput!
}

input BussinessWhereInput {
  AND: [BussinessWhereInput!]
  GSTIN: StringFilter
  NOT: [BussinessWhereInput!]
  OR: [BussinessWhereInput!]
  address: AddressNullableCompositeFilter
  bussinessUnits: BussinessUnitListRelationFilter
  constitution: StringNullableFilter
  contactInfo: ContactInfoNullableCompositeFilter
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  createdById: StringFilter
  dateOfIncorporation: DateTimeNullableFilter
  description: StringNullableFilter
  displayName: StringFilter
  id: StringFilter
  image: StringNullableFilter
  leagalName: StringFilter
  paymentSubscription: PaymentSubscriptionListRelationFilter
  profiles: ProfileListRelationFilter
  status: EnumBussinessStatusFilter
  updatedAt: DateTimeFilter
}

input BussinessWhereUniqueInput {
  displayName: String
  id: String
  leagalName: String
}

type ContactInfo {
  contact: [ContactNumber!]!
  email: String
  latitude: String
  longitude: String
  socialMedia: SocialMedia
  website: String
}

input ContactInfoCreateInput {
  contact: [ContactNumberCreateInput!]
  email: String
  latitude: String
  longitude: String
  socialMedia: SocialMediaCreateInput
  website: String
}

input ContactInfoNullableCompositeFilter {
  equals: contactInfoObjectEqualityInput
  is: ContactInfoWhereInput
  isNot: ContactInfoWhereInput
  isSet: Boolean
}

input ContactInfoOrderByInput {
  contact: ContactNumberOrderByCompositeAggregateInput
  email: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  socialMedia: SocialMediaOrderByInput
  website: SortOrder
}

input ContactInfoUpdateInput {
  contact: [ContactNumberCreateInput!]
  email: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  socialMedia: SocialMediaNullableUpdateEnvelopeInput
  website: NullableStringFieldUpdateOperationsInput
}

input ContactInfoUpsertInput {
  set: ContactInfoCreateInput!
  update: ContactInfoUpdateInput!
}

input ContactInfoWhereInput {
  AND: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  contact: [ContactNumberObjectEqualityInput!]
  email: StringNullableFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  socialMedia: SocialMediaNullableCompositeFilter
  website: StringNullableFilter
}

type ContactNumber {
  isVerified: Boolean!
  number: String!
  type: String!
}

input ContactNumberCreateInput {
  isVerified: Boolean
  number: String!
  type: String!
}

input ContactNumberObjectEqualityInput {
  isVerified: Boolean!
  number: String!
  type: String!
}

input ContactNumberOrderByCompositeAggregateInput {
  _count: SortOrder
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  isSet: Boolean
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  isSet: Boolean
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

type Doc {
  image: String
  isVerified: Boolean!
  number: String!
}

input DocCreateInput {
  image: String
  isVerified: Boolean
  number: String!
}

input DocNullableCompositeFilter {
  equals: DocObjectEqualityInput
  is: DocWhereInput
  isNot: DocWhereInput
  isSet: Boolean
}

input DocNullableCreateEnvelopeInput {
  set: DocCreateInput
}

input DocNullableUpdateEnvelopeInput {
  set: DocCreateInput
  unset: Boolean
  upsert: DocUpsertInput
}

input DocObjectEqualityInput {
  image: String
  isVerified: Boolean!
  number: String!
}

input DocOrderByInput {
  image: SortOrder
  isVerified: SortOrder
  number: SortOrder
}

input DocUpdateInput {
  image: NullableStringFieldUpdateOperationsInput
  isVerified: BoolFieldUpdateOperationsInput
  number: StringFieldUpdateOperationsInput
}

input DocUpsertInput {
  set: DocCreateInput!
  update: DocUpdateInput!
}

input DocWhereInput {
  AND: [DocWhereInput!]
  NOT: [DocWhereInput!]
  OR: [DocWhereInput!]
  image: StringNullableFilter
  isVerified: BoolFilter
  number: StringFilter
}

input EnumBussinessStatusFieldUpdateOperationsInput {
  set: BussinessStatus
}

input EnumBussinessStatusFilter {
  equals: BussinessStatus
  in: [BussinessStatus!]
  not: NestedEnumBussinessStatusFilter
  notIn: [BussinessStatus!]
}

input EnumBussinessStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumBussinessStatusFilter
  _min: NestedEnumBussinessStatusFilter
  equals: BussinessStatus
  in: [BussinessStatus!]
  not: NestedEnumBussinessStatusWithAggregatesFilter
  notIn: [BussinessStatus!]
}

input EnumBussinessTypeFieldUpdateOperationsInput {
  set: BussinessType
}

input EnumBussinessTypeFilter {
  equals: BussinessType
  in: [BussinessType!]
  not: NestedEnumBussinessTypeFilter
  notIn: [BussinessType!]
}

input EnumBussinessTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumBussinessTypeFilter
  _min: NestedEnumBussinessTypeFilter
  equals: BussinessType
  in: [BussinessType!]
  not: NestedEnumBussinessTypeWithAggregatesFilter
  notIn: [BussinessType!]
}

input EnumBussinessUnitTypeFieldUpdateOperationsInput {
  set: BussinessUnitType
}

input EnumBussinessUnitTypeFilter {
  equals: BussinessUnitType
  in: [BussinessUnitType!]
  not: NestedEnumBussinessUnitTypeFilter
  notIn: [BussinessUnitType!]
}

input EnumBussinessUnitTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumBussinessUnitTypeFilter
  _min: NestedEnumBussinessUnitTypeFilter
  equals: BussinessUnitType
  in: [BussinessUnitType!]
  not: NestedEnumBussinessUnitTypeWithAggregatesFilter
  notIn: [BussinessUnitType!]
}

input EnumInvitationStatusFieldUpdateOperationsInput {
  set: InvitationStatus
}

input EnumInvitationStatusFilter {
  equals: InvitationStatus
  in: [InvitationStatus!]
  not: NestedEnumInvitationStatusFilter
  notIn: [InvitationStatus!]
}

input EnumInvitationStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumInvitationStatusFilter
  _min: NestedEnumInvitationStatusFilter
  equals: InvitationStatus
  in: [InvitationStatus!]
  not: NestedEnumInvitationStatusWithAggregatesFilter
  notIn: [InvitationStatus!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input EnumSubscriptionStatusFieldUpdateOperationsInput {
  set: SubscriptionStatus
}

input EnumSubscriptionStatusFilter {
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusFilter
  notIn: [SubscriptionStatus!]
}

input EnumSubscriptionStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionStatusFilter
  _min: NestedEnumSubscriptionStatusFilter
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusWithAggregatesFilter
  notIn: [SubscriptionStatus!]
}

input EnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusFilter
  notIn: [UserStatus!]
}

input EnumUserStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumUserStatusFilter
  _min: NestedEnumUserStatusFilter
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusWithAggregatesFilter
  notIn: [UserStatus!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

enum InvitationStatus {
  Accepted
  Expired
  NotRequired
  PendingOwnerApproval
  PendingUserApproval
  Rejected
}

type Mutation {
  createBussiness(data: BussinessCreateInput!): Bussiness!
  createBussinessUnit(data: BussinessUnitCreateInput!): BussinessUnit!
  createManyBussiness(data: [BussinessCreateManyInput!]!): AffectedRowsOutput!
  createManyBussinessUnit(data: [BussinessUnitCreateManyInput!]!): AffectedRowsOutput!
  createManyPaymentSubscription(data: [PaymentSubscriptionCreateManyInput!]!): AffectedRowsOutput!
  createManyProfile(data: [ProfileCreateManyInput!]!): AffectedRowsOutput!
  createManySubscriptionType(data: [SubscriptionTypeCreateManyInput!]!): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!): AffectedRowsOutput!
  createPaymentSubscription(data: PaymentSubscriptionCreateInput!): PaymentSubscription!
  createProfile(data: ProfileCreateInput!): Profile!
  createSubscriptionType(data: SubscriptionTypeCreateInput!): SubscriptionType!
  createUser(data: UserCreateInput!): User!
  deleteBussiness(where: BussinessWhereUniqueInput!): Bussiness
  deleteBussinessUnit(where: BussinessUnitWhereUniqueInput!): BussinessUnit
  deleteManyBussiness(where: BussinessWhereInput): AffectedRowsOutput!
  deleteManyBussinessUnit(where: BussinessUnitWhereInput): AffectedRowsOutput!
  deleteManyPaymentSubscription(where: PaymentSubscriptionWhereInput): AffectedRowsOutput!
  deleteManyProfile(where: ProfileWhereInput): AffectedRowsOutput!
  deleteManySubscriptionType(where: SubscriptionTypeWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deletePaymentSubscription(where: PaymentSubscriptionWhereUniqueInput!): PaymentSubscription
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteSubscriptionType(where: SubscriptionTypeWhereUniqueInput!): SubscriptionType
  deleteUser(where: UserWhereUniqueInput!): User
  updateBussiness(data: BussinessUpdateInput!, where: BussinessWhereUniqueInput!): Bussiness
  updateBussinessUnit(data: BussinessUnitUpdateInput!, where: BussinessUnitWhereUniqueInput!): BussinessUnit
  updateManyBussiness(data: BussinessUpdateManyMutationInput!, where: BussinessWhereInput): AffectedRowsOutput!
  updateManyBussinessUnit(data: BussinessUnitUpdateManyMutationInput!, where: BussinessUnitWhereInput): AffectedRowsOutput!
  updateManyPaymentSubscription(data: PaymentSubscriptionUpdateManyMutationInput!, where: PaymentSubscriptionWhereInput): AffectedRowsOutput!
  updateManyProfile(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): AffectedRowsOutput!
  updateManySubscriptionType(data: SubscriptionTypeUpdateManyMutationInput!, where: SubscriptionTypeWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updatePaymentSubscription(data: PaymentSubscriptionUpdateInput!, where: PaymentSubscriptionWhereUniqueInput!): PaymentSubscription
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateSubscriptionType(data: SubscriptionTypeUpdateInput!, where: SubscriptionTypeWhereUniqueInput!): SubscriptionType
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertBussiness(create: BussinessCreateInput!, update: BussinessUpdateInput!, where: BussinessWhereUniqueInput!): Bussiness!
  upsertBussinessUnit(create: BussinessUnitCreateInput!, update: BussinessUnitUpdateInput!, where: BussinessUnitWhereUniqueInput!): BussinessUnit!
  upsertPaymentSubscription(create: PaymentSubscriptionCreateInput!, update: PaymentSubscriptionUpdateInput!, where: PaymentSubscriptionWhereUniqueInput!): PaymentSubscription!
  upsertProfile(create: ProfileCreateInput!, update: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  upsertSubscriptionType(create: SubscriptionTypeCreateInput!, update: SubscriptionTypeUpdateInput!, where: SubscriptionTypeWhereUniqueInput!): SubscriptionType!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  isSet: Boolean
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  isSet: Boolean
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumBussinessStatusFilter {
  equals: BussinessStatus
  in: [BussinessStatus!]
  not: NestedEnumBussinessStatusFilter
  notIn: [BussinessStatus!]
}

input NestedEnumBussinessStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumBussinessStatusFilter
  _min: NestedEnumBussinessStatusFilter
  equals: BussinessStatus
  in: [BussinessStatus!]
  not: NestedEnumBussinessStatusWithAggregatesFilter
  notIn: [BussinessStatus!]
}

input NestedEnumBussinessTypeFilter {
  equals: BussinessType
  in: [BussinessType!]
  not: NestedEnumBussinessTypeFilter
  notIn: [BussinessType!]
}

input NestedEnumBussinessTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumBussinessTypeFilter
  _min: NestedEnumBussinessTypeFilter
  equals: BussinessType
  in: [BussinessType!]
  not: NestedEnumBussinessTypeWithAggregatesFilter
  notIn: [BussinessType!]
}

input NestedEnumBussinessUnitTypeFilter {
  equals: BussinessUnitType
  in: [BussinessUnitType!]
  not: NestedEnumBussinessUnitTypeFilter
  notIn: [BussinessUnitType!]
}

input NestedEnumBussinessUnitTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumBussinessUnitTypeFilter
  _min: NestedEnumBussinessUnitTypeFilter
  equals: BussinessUnitType
  in: [BussinessUnitType!]
  not: NestedEnumBussinessUnitTypeWithAggregatesFilter
  notIn: [BussinessUnitType!]
}

input NestedEnumInvitationStatusFilter {
  equals: InvitationStatus
  in: [InvitationStatus!]
  not: NestedEnumInvitationStatusFilter
  notIn: [InvitationStatus!]
}

input NestedEnumInvitationStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumInvitationStatusFilter
  _min: NestedEnumInvitationStatusFilter
  equals: InvitationStatus
  in: [InvitationStatus!]
  not: NestedEnumInvitationStatusWithAggregatesFilter
  notIn: [InvitationStatus!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedEnumSubscriptionStatusFilter {
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusFilter
  notIn: [SubscriptionStatus!]
}

input NestedEnumSubscriptionStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionStatusFilter
  _min: NestedEnumSubscriptionStatusFilter
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusWithAggregatesFilter
  notIn: [SubscriptionStatus!]
}

input NestedEnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusFilter
  notIn: [UserStatus!]
}

input NestedEnumUserStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumUserStatusFilter
  _min: NestedEnumUserStatusFilter
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusWithAggregatesFilter
  notIn: [UserStatus!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  isSet: Boolean
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
  unset: Boolean
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
  unset: Boolean
}

input NullableStringFieldUpdateOperationsInput {
  set: String
  unset: Boolean
}

type PaymentSubscription {
  bussiness: Bussiness!
  bussinessId: String!
  createdAt: DateTime!
  expiryDate: DateTime
  id: String!
  lastSubscriptionType: SubscriptionType
  status: SubscriptionStatus!
  subscriptionId: String!
  updatedAt: DateTime!
}

type PaymentSubscriptionCountAggregate {
  _all: Int!
  bussinessId: Int!
  createdAt: Int!
  expiryDate: Int!
  id: Int!
  status: Int!
  subscriptionId: Int!
  updatedAt: Int!
}

input PaymentSubscriptionCountOrderByAggregateInput {
  bussinessId: SortOrder
  createdAt: SortOrder
  expiryDate: SortOrder
  id: SortOrder
  status: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

input PaymentSubscriptionCreateInput {
  bussiness: BussinessCreateNestedOneWithoutPaymentSubscriptionInput!
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  lastSubscriptionType: SubscriptionTypeCreateNestedOneWithoutPaymentSubscriptionsInput
  status: SubscriptionStatus!
  updatedAt: DateTime
}

input PaymentSubscriptionCreateManyBussinessInput {
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  status: SubscriptionStatus!
  subscriptionId: String!
  updatedAt: DateTime
}

input PaymentSubscriptionCreateManyBussinessInputEnvelope {
  data: [PaymentSubscriptionCreateManyBussinessInput!]!
}

input PaymentSubscriptionCreateManyInput {
  bussinessId: String!
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  status: SubscriptionStatus!
  subscriptionId: String!
  updatedAt: DateTime
}

input PaymentSubscriptionCreateManyLastSubscriptionTypeInput {
  bussinessId: String!
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  status: SubscriptionStatus!
  updatedAt: DateTime
}

input PaymentSubscriptionCreateManyLastSubscriptionTypeInputEnvelope {
  data: [PaymentSubscriptionCreateManyLastSubscriptionTypeInput!]!
}

input PaymentSubscriptionCreateNestedManyWithoutBussinessInput {
  connect: [PaymentSubscriptionWhereUniqueInput!]
  connectOrCreate: [PaymentSubscriptionCreateOrConnectWithoutBussinessInput!]
  create: [PaymentSubscriptionCreateWithoutBussinessInput!]
  createMany: PaymentSubscriptionCreateManyBussinessInputEnvelope
}

input PaymentSubscriptionCreateNestedManyWithoutLastSubscriptionTypeInput {
  connect: [PaymentSubscriptionWhereUniqueInput!]
  connectOrCreate: [PaymentSubscriptionCreateOrConnectWithoutLastSubscriptionTypeInput!]
  create: [PaymentSubscriptionCreateWithoutLastSubscriptionTypeInput!]
  createMany: PaymentSubscriptionCreateManyLastSubscriptionTypeInputEnvelope
}

input PaymentSubscriptionCreateOrConnectWithoutBussinessInput {
  create: PaymentSubscriptionCreateWithoutBussinessInput!
  where: PaymentSubscriptionWhereUniqueInput!
}

input PaymentSubscriptionCreateOrConnectWithoutLastSubscriptionTypeInput {
  create: PaymentSubscriptionCreateWithoutLastSubscriptionTypeInput!
  where: PaymentSubscriptionWhereUniqueInput!
}

input PaymentSubscriptionCreateWithoutBussinessInput {
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  lastSubscriptionType: SubscriptionTypeCreateNestedOneWithoutPaymentSubscriptionsInput
  status: SubscriptionStatus!
  updatedAt: DateTime
}

input PaymentSubscriptionCreateWithoutLastSubscriptionTypeInput {
  bussiness: BussinessCreateNestedOneWithoutPaymentSubscriptionInput!
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  status: SubscriptionStatus!
  updatedAt: DateTime
}

type PaymentSubscriptionGroupBy {
  _count: PaymentSubscriptionCountAggregate
  _max: PaymentSubscriptionMaxAggregate
  _min: PaymentSubscriptionMinAggregate
  bussinessId: String!
  createdAt: DateTime!
  expiryDate: DateTime
  id: String!
  status: SubscriptionStatus!
  subscriptionId: String!
  updatedAt: DateTime!
}

input PaymentSubscriptionListRelationFilter {
  every: PaymentSubscriptionWhereInput
  none: PaymentSubscriptionWhereInput
  some: PaymentSubscriptionWhereInput
}

type PaymentSubscriptionMaxAggregate {
  bussinessId: String
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  status: SubscriptionStatus
  subscriptionId: String
  updatedAt: DateTime
}

input PaymentSubscriptionMaxOrderByAggregateInput {
  bussinessId: SortOrder
  createdAt: SortOrder
  expiryDate: SortOrder
  id: SortOrder
  status: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

type PaymentSubscriptionMinAggregate {
  bussinessId: String
  createdAt: DateTime
  expiryDate: DateTime
  id: String
  status: SubscriptionStatus
  subscriptionId: String
  updatedAt: DateTime
}

input PaymentSubscriptionMinOrderByAggregateInput {
  bussinessId: SortOrder
  createdAt: SortOrder
  expiryDate: SortOrder
  id: SortOrder
  status: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

input PaymentSubscriptionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PaymentSubscriptionOrderByWithAggregationInput {
  _count: PaymentSubscriptionCountOrderByAggregateInput
  _max: PaymentSubscriptionMaxOrderByAggregateInput
  _min: PaymentSubscriptionMinOrderByAggregateInput
  bussinessId: SortOrder
  createdAt: SortOrder
  expiryDate: SortOrder
  id: SortOrder
  status: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

input PaymentSubscriptionOrderByWithRelationInput {
  bussiness: BussinessOrderByWithRelationInput
  bussinessId: SortOrder
  createdAt: SortOrder
  expiryDate: SortOrder
  id: SortOrder
  lastSubscriptionType: SubscriptionTypeOrderByWithRelationInput
  status: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

enum PaymentSubscriptionScalarFieldEnum {
  bussinessId
  createdAt
  expiryDate
  id
  status
  subscriptionId
  updatedAt
}

input PaymentSubscriptionScalarWhereInput {
  AND: [PaymentSubscriptionScalarWhereInput!]
  NOT: [PaymentSubscriptionScalarWhereInput!]
  OR: [PaymentSubscriptionScalarWhereInput!]
  bussinessId: StringFilter
  createdAt: DateTimeFilter
  expiryDate: DateTimeNullableFilter
  id: StringFilter
  status: EnumSubscriptionStatusFilter
  subscriptionId: StringFilter
  updatedAt: DateTimeFilter
}

input PaymentSubscriptionScalarWhereWithAggregatesInput {
  AND: [PaymentSubscriptionScalarWhereWithAggregatesInput!]
  NOT: [PaymentSubscriptionScalarWhereWithAggregatesInput!]
  OR: [PaymentSubscriptionScalarWhereWithAggregatesInput!]
  bussinessId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expiryDate: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  status: EnumSubscriptionStatusWithAggregatesFilter
  subscriptionId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PaymentSubscriptionUpdateInput {
  bussiness: BussinessUpdateOneRequiredWithoutPaymentSubscriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiryDate: NullableDateTimeFieldUpdateOperationsInput
  lastSubscriptionType: SubscriptionTypeUpdateOneWithoutPaymentSubscriptionsInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentSubscriptionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiryDate: NullableDateTimeFieldUpdateOperationsInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentSubscriptionUpdateManyWithWhereWithoutBussinessInput {
  data: PaymentSubscriptionUpdateManyMutationInput!
  where: PaymentSubscriptionScalarWhereInput!
}

input PaymentSubscriptionUpdateManyWithWhereWithoutLastSubscriptionTypeInput {
  data: PaymentSubscriptionUpdateManyMutationInput!
  where: PaymentSubscriptionScalarWhereInput!
}

input PaymentSubscriptionUpdateManyWithoutBussinessInput {
  connect: [PaymentSubscriptionWhereUniqueInput!]
  connectOrCreate: [PaymentSubscriptionCreateOrConnectWithoutBussinessInput!]
  create: [PaymentSubscriptionCreateWithoutBussinessInput!]
  createMany: PaymentSubscriptionCreateManyBussinessInputEnvelope
  delete: [PaymentSubscriptionWhereUniqueInput!]
  deleteMany: [PaymentSubscriptionScalarWhereInput!]
  disconnect: [PaymentSubscriptionWhereUniqueInput!]
  set: [PaymentSubscriptionWhereUniqueInput!]
  update: [PaymentSubscriptionUpdateWithWhereUniqueWithoutBussinessInput!]
  updateMany: [PaymentSubscriptionUpdateManyWithWhereWithoutBussinessInput!]
  upsert: [PaymentSubscriptionUpsertWithWhereUniqueWithoutBussinessInput!]
}

input PaymentSubscriptionUpdateManyWithoutLastSubscriptionTypeInput {
  connect: [PaymentSubscriptionWhereUniqueInput!]
  connectOrCreate: [PaymentSubscriptionCreateOrConnectWithoutLastSubscriptionTypeInput!]
  create: [PaymentSubscriptionCreateWithoutLastSubscriptionTypeInput!]
  createMany: PaymentSubscriptionCreateManyLastSubscriptionTypeInputEnvelope
  delete: [PaymentSubscriptionWhereUniqueInput!]
  deleteMany: [PaymentSubscriptionScalarWhereInput!]
  disconnect: [PaymentSubscriptionWhereUniqueInput!]
  set: [PaymentSubscriptionWhereUniqueInput!]
  update: [PaymentSubscriptionUpdateWithWhereUniqueWithoutLastSubscriptionTypeInput!]
  updateMany: [PaymentSubscriptionUpdateManyWithWhereWithoutLastSubscriptionTypeInput!]
  upsert: [PaymentSubscriptionUpsertWithWhereUniqueWithoutLastSubscriptionTypeInput!]
}

input PaymentSubscriptionUpdateWithWhereUniqueWithoutBussinessInput {
  data: PaymentSubscriptionUpdateWithoutBussinessInput!
  where: PaymentSubscriptionWhereUniqueInput!
}

input PaymentSubscriptionUpdateWithWhereUniqueWithoutLastSubscriptionTypeInput {
  data: PaymentSubscriptionUpdateWithoutLastSubscriptionTypeInput!
  where: PaymentSubscriptionWhereUniqueInput!
}

input PaymentSubscriptionUpdateWithoutBussinessInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiryDate: NullableDateTimeFieldUpdateOperationsInput
  lastSubscriptionType: SubscriptionTypeUpdateOneWithoutPaymentSubscriptionsInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentSubscriptionUpdateWithoutLastSubscriptionTypeInput {
  bussiness: BussinessUpdateOneRequiredWithoutPaymentSubscriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiryDate: NullableDateTimeFieldUpdateOperationsInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentSubscriptionUpsertWithWhereUniqueWithoutBussinessInput {
  create: PaymentSubscriptionCreateWithoutBussinessInput!
  update: PaymentSubscriptionUpdateWithoutBussinessInput!
  where: PaymentSubscriptionWhereUniqueInput!
}

input PaymentSubscriptionUpsertWithWhereUniqueWithoutLastSubscriptionTypeInput {
  create: PaymentSubscriptionCreateWithoutLastSubscriptionTypeInput!
  update: PaymentSubscriptionUpdateWithoutLastSubscriptionTypeInput!
  where: PaymentSubscriptionWhereUniqueInput!
}

input PaymentSubscriptionWhereInput {
  AND: [PaymentSubscriptionWhereInput!]
  NOT: [PaymentSubscriptionWhereInput!]
  OR: [PaymentSubscriptionWhereInput!]
  bussiness: BussinessRelationFilter
  bussinessId: StringFilter
  createdAt: DateTimeFilter
  expiryDate: DateTimeNullableFilter
  id: StringFilter
  lastSubscriptionType: SubscriptionTypeRelationFilter
  status: EnumSubscriptionStatusFilter
  subscriptionId: StringFilter
  updatedAt: DateTimeFilter
}

input PaymentSubscriptionWhereUniqueInput {
  id: String
}

type Profile {
  _count: ProfileCount
  bussiness: Bussiness
  bussinessId: String
  bussinessUnitId: String
  bussinessUnits: BussinessUnit
  createdAt: DateTime!
  createdInvitations(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  id: String!
  invitatedBy: Profile
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type ProfileCount {
  createdInvitations: Int!
}

type ProfileCountAggregate {
  _all: Int!
  bussinessId: Int!
  bussinessUnitId: Int!
  createdAt: Int!
  id: Int!
  invitatedById: Int!
  invitationDate: Int!
  invitationExpiry: Int!
  invitationHashCode: Int!
  invitationStatus: Int!
  profileType: Int!
  role: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
}

input ProfileCountOrderByAggregateInput {
  bussinessId: SortOrder
  bussinessUnitId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  invitatedById: SortOrder
  invitationDate: SortOrder
  invitationExpiry: SortOrder
  invitationHashCode: SortOrder
  invitationStatus: SortOrder
  profileType: SortOrder
  role: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProfileCreateInput {
  bussiness: BussinessCreateNestedOneWithoutProfilesInput
  bussinessUnits: BussinessUnitCreateNestedOneWithoutProfilesInput
  createdAt: DateTime
  createdInvitations: ProfileCreateNestedManyWithoutInvitatedByInput
  id: String
  invitatedBy: ProfileCreateNestedOneWithoutCreatedInvitationsInput
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfilesInput!
}

input ProfileCreateManyBussinessInput {
  bussinessUnitId: String
  createdAt: DateTime
  id: String
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  userId: String!
}

input ProfileCreateManyBussinessInputEnvelope {
  data: [ProfileCreateManyBussinessInput!]!
}

input ProfileCreateManyBussinessUnitsInput {
  bussinessId: String
  createdAt: DateTime
  id: String
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  userId: String!
}

input ProfileCreateManyBussinessUnitsInputEnvelope {
  data: [ProfileCreateManyBussinessUnitsInput!]!
}

input ProfileCreateManyInput {
  bussinessId: String
  bussinessUnitId: String
  createdAt: DateTime
  id: String
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  userId: String!
}

input ProfileCreateManyInvitatedByInput {
  bussinessId: String
  bussinessUnitId: String
  createdAt: DateTime
  id: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  userId: String!
}

input ProfileCreateManyInvitatedByInputEnvelope {
  data: [ProfileCreateManyInvitatedByInput!]!
}

input ProfileCreateManyUserInput {
  bussinessId: String
  bussinessUnitId: String
  createdAt: DateTime
  id: String
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
}

input ProfileCreateManyUserInputEnvelope {
  data: [ProfileCreateManyUserInput!]!
}

input ProfileCreateNestedManyWithoutBussinessInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutBussinessInput!]
  create: [ProfileCreateWithoutBussinessInput!]
  createMany: ProfileCreateManyBussinessInputEnvelope
}

input ProfileCreateNestedManyWithoutBussinessUnitsInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutBussinessUnitsInput!]
  create: [ProfileCreateWithoutBussinessUnitsInput!]
  createMany: ProfileCreateManyBussinessUnitsInputEnvelope
}

input ProfileCreateNestedManyWithoutInvitatedByInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutInvitatedByInput!]
  create: [ProfileCreateWithoutInvitatedByInput!]
  createMany: ProfileCreateManyInvitatedByInputEnvelope
}

input ProfileCreateNestedManyWithoutUserInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutUserInput!]
  create: [ProfileCreateWithoutUserInput!]
  createMany: ProfileCreateManyUserInputEnvelope
}

input ProfileCreateNestedOneWithoutCreatedInvitationsInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutCreatedInvitationsInput
  create: ProfileCreateWithoutCreatedInvitationsInput
}

input ProfileCreateOrConnectWithoutBussinessInput {
  create: ProfileCreateWithoutBussinessInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutBussinessUnitsInput {
  create: ProfileCreateWithoutBussinessUnitsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutCreatedInvitationsInput {
  create: ProfileCreateWithoutCreatedInvitationsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutInvitatedByInput {
  create: ProfileCreateWithoutInvitatedByInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutBussinessInput {
  bussinessUnits: BussinessUnitCreateNestedOneWithoutProfilesInput
  createdAt: DateTime
  createdInvitations: ProfileCreateNestedManyWithoutInvitatedByInput
  id: String
  invitatedBy: ProfileCreateNestedOneWithoutCreatedInvitationsInput
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfilesInput!
}

input ProfileCreateWithoutBussinessUnitsInput {
  bussiness: BussinessCreateNestedOneWithoutProfilesInput
  createdAt: DateTime
  createdInvitations: ProfileCreateNestedManyWithoutInvitatedByInput
  id: String
  invitatedBy: ProfileCreateNestedOneWithoutCreatedInvitationsInput
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfilesInput!
}

input ProfileCreateWithoutCreatedInvitationsInput {
  bussiness: BussinessCreateNestedOneWithoutProfilesInput
  bussinessUnits: BussinessUnitCreateNestedOneWithoutProfilesInput
  createdAt: DateTime
  id: String
  invitatedBy: ProfileCreateNestedOneWithoutCreatedInvitationsInput
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfilesInput!
}

input ProfileCreateWithoutInvitatedByInput {
  bussiness: BussinessCreateNestedOneWithoutProfilesInput
  bussinessUnits: BussinessUnitCreateNestedOneWithoutProfilesInput
  createdAt: DateTime
  createdInvitations: ProfileCreateNestedManyWithoutInvitatedByInput
  id: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfilesInput!
}

input ProfileCreateWithoutUserInput {
  bussiness: BussinessCreateNestedOneWithoutProfilesInput
  bussinessUnits: BussinessUnitCreateNestedOneWithoutProfilesInput
  createdAt: DateTime
  createdInvitations: ProfileCreateNestedManyWithoutInvitatedByInput
  id: String
  invitatedBy: ProfileCreateNestedOneWithoutCreatedInvitationsInput
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime
}

type ProfileGroupBy {
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
  bussinessId: String
  bussinessUnitId: String
  createdAt: DateTime!
  id: String!
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus!
  profileType: BussinessType!
  role: Role!
  status: UserStatus!
  updatedAt: DateTime!
  userId: String!
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  none: ProfileWhereInput
  some: ProfileWhereInput
}

type ProfileMaxAggregate {
  bussinessId: String
  bussinessUnitId: String
  createdAt: DateTime
  id: String
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus
  profileType: BussinessType
  role: Role
  status: UserStatus
  updatedAt: DateTime
  userId: String
}

input ProfileMaxOrderByAggregateInput {
  bussinessId: SortOrder
  bussinessUnitId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  invitatedById: SortOrder
  invitationDate: SortOrder
  invitationExpiry: SortOrder
  invitationHashCode: SortOrder
  invitationStatus: SortOrder
  profileType: SortOrder
  role: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ProfileMinAggregate {
  bussinessId: String
  bussinessUnitId: String
  createdAt: DateTime
  id: String
  invitatedById: String
  invitationDate: DateTime
  invitationExpiry: DateTime
  invitationHashCode: String
  invitationStatus: InvitationStatus
  profileType: BussinessType
  role: Role
  status: UserStatus
  updatedAt: DateTime
  userId: String
}

input ProfileMinOrderByAggregateInput {
  bussinessId: SortOrder
  bussinessUnitId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  invitatedById: SortOrder
  invitationDate: SortOrder
  invitationExpiry: SortOrder
  invitationHashCode: SortOrder
  invitationStatus: SortOrder
  profileType: SortOrder
  role: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProfileOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProfileOrderByWithAggregationInput {
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  bussinessId: SortOrder
  bussinessUnitId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  invitatedById: SortOrder
  invitationDate: SortOrder
  invitationExpiry: SortOrder
  invitationHashCode: SortOrder
  invitationStatus: SortOrder
  profileType: SortOrder
  role: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProfileOrderByWithRelationInput {
  bussiness: BussinessOrderByWithRelationInput
  bussinessId: SortOrder
  bussinessUnitId: SortOrder
  bussinessUnits: BussinessUnitOrderByWithRelationInput
  createdAt: SortOrder
  createdInvitations: ProfileOrderByRelationAggregateInput
  id: SortOrder
  invitatedBy: ProfileOrderByWithRelationInput
  invitatedById: SortOrder
  invitationDate: SortOrder
  invitationExpiry: SortOrder
  invitationHashCode: SortOrder
  invitationStatus: SortOrder
  profileType: SortOrder
  role: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  bussinessId
  bussinessUnitId
  createdAt
  id
  invitatedById
  invitationDate
  invitationExpiry
  invitationHashCode
  invitationStatus
  profileType
  role
  status
  updatedAt
  userId
}

input ProfileScalarWhereInput {
  AND: [ProfileScalarWhereInput!]
  NOT: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  bussinessId: StringNullableFilter
  bussinessUnitId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  invitatedById: StringNullableFilter
  invitationDate: DateTimeNullableFilter
  invitationExpiry: DateTimeNullableFilter
  invitationHashCode: StringNullableFilter
  invitationStatus: EnumInvitationStatusFilter
  profileType: EnumBussinessTypeFilter
  role: EnumRoleFilter
  status: EnumUserStatusFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput!]
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  bussinessId: StringNullableWithAggregatesFilter
  bussinessUnitId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  invitatedById: StringNullableWithAggregatesFilter
  invitationDate: DateTimeNullableWithAggregatesFilter
  invitationExpiry: DateTimeNullableWithAggregatesFilter
  invitationHashCode: StringNullableWithAggregatesFilter
  invitationStatus: EnumInvitationStatusWithAggregatesFilter
  profileType: EnumBussinessTypeWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  status: EnumUserStatusWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ProfileUpdateInput {
  bussiness: BussinessUpdateOneWithoutProfilesInput
  bussinessUnits: BussinessUnitUpdateOneWithoutProfilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdInvitations: ProfileUpdateManyWithoutInvitatedByInput
  invitatedBy: ProfileUpdateOneWithoutCreatedInvitationsInput
  invitationDate: NullableDateTimeFieldUpdateOperationsInput
  invitationExpiry: NullableDateTimeFieldUpdateOperationsInput
  invitationHashCode: NullableStringFieldUpdateOperationsInput
  invitationStatus: EnumInvitationStatusFieldUpdateOperationsInput
  profileType: EnumBussinessTypeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfilesInput
}

input ProfileUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  invitationDate: NullableDateTimeFieldUpdateOperationsInput
  invitationExpiry: NullableDateTimeFieldUpdateOperationsInput
  invitationHashCode: NullableStringFieldUpdateOperationsInput
  invitationStatus: EnumInvitationStatusFieldUpdateOperationsInput
  profileType: EnumBussinessTypeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateManyWithWhereWithoutBussinessInput {
  data: ProfileUpdateManyMutationInput!
  where: ProfileScalarWhereInput!
}

input ProfileUpdateManyWithWhereWithoutBussinessUnitsInput {
  data: ProfileUpdateManyMutationInput!
  where: ProfileScalarWhereInput!
}

input ProfileUpdateManyWithWhereWithoutInvitatedByInput {
  data: ProfileUpdateManyMutationInput!
  where: ProfileScalarWhereInput!
}

input ProfileUpdateManyWithWhereWithoutUserInput {
  data: ProfileUpdateManyMutationInput!
  where: ProfileScalarWhereInput!
}

input ProfileUpdateManyWithoutBussinessInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutBussinessInput!]
  create: [ProfileCreateWithoutBussinessInput!]
  createMany: ProfileCreateManyBussinessInputEnvelope
  delete: [ProfileWhereUniqueInput!]
  deleteMany: [ProfileScalarWhereInput!]
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutBussinessInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutBussinessInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutBussinessInput!]
}

input ProfileUpdateManyWithoutBussinessUnitsInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutBussinessUnitsInput!]
  create: [ProfileCreateWithoutBussinessUnitsInput!]
  createMany: ProfileCreateManyBussinessUnitsInputEnvelope
  delete: [ProfileWhereUniqueInput!]
  deleteMany: [ProfileScalarWhereInput!]
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutBussinessUnitsInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutBussinessUnitsInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutBussinessUnitsInput!]
}

input ProfileUpdateManyWithoutInvitatedByInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutInvitatedByInput!]
  create: [ProfileCreateWithoutInvitatedByInput!]
  createMany: ProfileCreateManyInvitatedByInputEnvelope
  delete: [ProfileWhereUniqueInput!]
  deleteMany: [ProfileScalarWhereInput!]
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutInvitatedByInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutInvitatedByInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutInvitatedByInput!]
}

input ProfileUpdateManyWithoutUserInput {
  connect: [ProfileWhereUniqueInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutUserInput!]
  create: [ProfileCreateWithoutUserInput!]
  createMany: ProfileCreateManyUserInputEnvelope
  delete: [ProfileWhereUniqueInput!]
  deleteMany: [ProfileScalarWhereInput!]
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutUserInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutUserInput!]
}

input ProfileUpdateOneWithoutCreatedInvitationsInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutCreatedInvitationsInput
  create: ProfileCreateWithoutCreatedInvitationsInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutCreatedInvitationsInput
  upsert: ProfileUpsertWithoutCreatedInvitationsInput
}

input ProfileUpdateWithWhereUniqueWithoutBussinessInput {
  data: ProfileUpdateWithoutBussinessInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpdateWithWhereUniqueWithoutBussinessUnitsInput {
  data: ProfileUpdateWithoutBussinessUnitsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpdateWithWhereUniqueWithoutInvitatedByInput {
  data: ProfileUpdateWithoutInvitatedByInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpdateWithWhereUniqueWithoutUserInput {
  data: ProfileUpdateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpdateWithoutBussinessInput {
  bussinessUnits: BussinessUnitUpdateOneWithoutProfilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdInvitations: ProfileUpdateManyWithoutInvitatedByInput
  invitatedBy: ProfileUpdateOneWithoutCreatedInvitationsInput
  invitationDate: NullableDateTimeFieldUpdateOperationsInput
  invitationExpiry: NullableDateTimeFieldUpdateOperationsInput
  invitationHashCode: NullableStringFieldUpdateOperationsInput
  invitationStatus: EnumInvitationStatusFieldUpdateOperationsInput
  profileType: EnumBussinessTypeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfilesInput
}

input ProfileUpdateWithoutBussinessUnitsInput {
  bussiness: BussinessUpdateOneWithoutProfilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdInvitations: ProfileUpdateManyWithoutInvitatedByInput
  invitatedBy: ProfileUpdateOneWithoutCreatedInvitationsInput
  invitationDate: NullableDateTimeFieldUpdateOperationsInput
  invitationExpiry: NullableDateTimeFieldUpdateOperationsInput
  invitationHashCode: NullableStringFieldUpdateOperationsInput
  invitationStatus: EnumInvitationStatusFieldUpdateOperationsInput
  profileType: EnumBussinessTypeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfilesInput
}

input ProfileUpdateWithoutCreatedInvitationsInput {
  bussiness: BussinessUpdateOneWithoutProfilesInput
  bussinessUnits: BussinessUnitUpdateOneWithoutProfilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  invitatedBy: ProfileUpdateOneWithoutCreatedInvitationsInput
  invitationDate: NullableDateTimeFieldUpdateOperationsInput
  invitationExpiry: NullableDateTimeFieldUpdateOperationsInput
  invitationHashCode: NullableStringFieldUpdateOperationsInput
  invitationStatus: EnumInvitationStatusFieldUpdateOperationsInput
  profileType: EnumBussinessTypeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfilesInput
}

input ProfileUpdateWithoutInvitatedByInput {
  bussiness: BussinessUpdateOneWithoutProfilesInput
  bussinessUnits: BussinessUnitUpdateOneWithoutProfilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdInvitations: ProfileUpdateManyWithoutInvitatedByInput
  invitationDate: NullableDateTimeFieldUpdateOperationsInput
  invitationExpiry: NullableDateTimeFieldUpdateOperationsInput
  invitationHashCode: NullableStringFieldUpdateOperationsInput
  invitationStatus: EnumInvitationStatusFieldUpdateOperationsInput
  profileType: EnumBussinessTypeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfilesInput
}

input ProfileUpdateWithoutUserInput {
  bussiness: BussinessUpdateOneWithoutProfilesInput
  bussinessUnits: BussinessUnitUpdateOneWithoutProfilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdInvitations: ProfileUpdateManyWithoutInvitatedByInput
  invitatedBy: ProfileUpdateOneWithoutCreatedInvitationsInput
  invitationDate: NullableDateTimeFieldUpdateOperationsInput
  invitationExpiry: NullableDateTimeFieldUpdateOperationsInput
  invitationHashCode: NullableStringFieldUpdateOperationsInput
  invitationStatus: EnumInvitationStatusFieldUpdateOperationsInput
  profileType: EnumBussinessTypeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpsertWithWhereUniqueWithoutBussinessInput {
  create: ProfileCreateWithoutBussinessInput!
  update: ProfileUpdateWithoutBussinessInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpsertWithWhereUniqueWithoutBussinessUnitsInput {
  create: ProfileCreateWithoutBussinessUnitsInput!
  update: ProfileUpdateWithoutBussinessUnitsInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpsertWithWhereUniqueWithoutInvitatedByInput {
  create: ProfileCreateWithoutInvitatedByInput!
  update: ProfileUpdateWithoutInvitatedByInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpsertWithWhereUniqueWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileUpsertWithoutCreatedInvitationsInput {
  create: ProfileCreateWithoutCreatedInvitationsInput!
  update: ProfileUpdateWithoutCreatedInvitationsInput!
}

input ProfileUserIdBussinessIdBussinessUnitIdCompoundUniqueInput {
  bussinessId: String!
  bussinessUnitId: String!
  userId: String!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  bussiness: BussinessRelationFilter
  bussinessId: StringNullableFilter
  bussinessUnitId: StringNullableFilter
  bussinessUnits: BussinessUnitRelationFilter
  createdAt: DateTimeFilter
  createdInvitations: ProfileListRelationFilter
  id: StringFilter
  invitatedBy: ProfileRelationFilter
  invitatedById: StringNullableFilter
  invitationDate: DateTimeNullableFilter
  invitationExpiry: DateTimeNullableFilter
  invitationHashCode: StringNullableFilter
  invitationStatus: EnumInvitationStatusFilter
  profileType: EnumBussinessTypeFilter
  role: EnumRoleFilter
  status: EnumUserStatusFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ProfileWhereUniqueInput {
  id: String
  userId_bussinessId_bussinessUnitId: ProfileUserIdBussinessIdBussinessUnitIdCompoundUniqueInput
}

type Query {
  aggregateBussiness(cursor: BussinessWhereUniqueInput, orderBy: [BussinessOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessWhereInput): AggregateBussiness!
  aggregateBussinessUnit(cursor: BussinessUnitWhereUniqueInput, orderBy: [BussinessUnitOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessUnitWhereInput): AggregateBussinessUnit!
  aggregatePaymentSubscription(cursor: PaymentSubscriptionWhereUniqueInput, orderBy: [PaymentSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentSubscriptionWhereInput): AggregatePaymentSubscription!
  aggregateProfile(cursor: ProfileWhereUniqueInput, orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): AggregateProfile!
  aggregateSubscriptionType(cursor: SubscriptionTypeWhereUniqueInput, orderBy: [SubscriptionTypeOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionTypeWhereInput): AggregateSubscriptionType!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  bussiness(where: BussinessWhereUniqueInput!): Bussiness
  bussinessUnit(where: BussinessUnitWhereUniqueInput!): BussinessUnit
  bussinessUnits(cursor: BussinessUnitWhereUniqueInput, distinct: [BussinessUnitScalarFieldEnum!], orderBy: [BussinessUnitOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessUnitWhereInput): [BussinessUnit!]!
  bussinesses(cursor: BussinessWhereUniqueInput, distinct: [BussinessScalarFieldEnum!], orderBy: [BussinessOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessWhereInput): [Bussiness!]!
  findFirstBussiness(cursor: BussinessWhereUniqueInput, distinct: [BussinessScalarFieldEnum!], orderBy: [BussinessOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessWhereInput): Bussiness
  findFirstBussinessUnit(cursor: BussinessUnitWhereUniqueInput, distinct: [BussinessUnitScalarFieldEnum!], orderBy: [BussinessUnitOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessUnitWhereInput): BussinessUnit
  findFirstPaymentSubscription(cursor: PaymentSubscriptionWhereUniqueInput, distinct: [PaymentSubscriptionScalarFieldEnum!], orderBy: [PaymentSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentSubscriptionWhereInput): PaymentSubscription
  findFirstProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): Profile
  findFirstSubscriptionType(cursor: SubscriptionTypeWhereUniqueInput, distinct: [SubscriptionTypeScalarFieldEnum!], orderBy: [SubscriptionTypeOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionTypeWhereInput): SubscriptionType
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByBussiness(by: [BussinessScalarFieldEnum!]!, having: BussinessScalarWhereWithAggregatesInput, orderBy: [BussinessOrderByWithAggregationInput!], skip: Int, take: Int, where: BussinessWhereInput): [BussinessGroupBy!]!
  groupByBussinessUnit(by: [BussinessUnitScalarFieldEnum!]!, having: BussinessUnitScalarWhereWithAggregatesInput, orderBy: [BussinessUnitOrderByWithAggregationInput!], skip: Int, take: Int, where: BussinessUnitWhereInput): [BussinessUnitGroupBy!]!
  groupByPaymentSubscription(by: [PaymentSubscriptionScalarFieldEnum!]!, having: PaymentSubscriptionScalarWhereWithAggregatesInput, orderBy: [PaymentSubscriptionOrderByWithAggregationInput!], skip: Int, take: Int, where: PaymentSubscriptionWhereInput): [PaymentSubscriptionGroupBy!]!
  groupByProfile(by: [ProfileScalarFieldEnum!]!, having: ProfileScalarWhereWithAggregatesInput, orderBy: [ProfileOrderByWithAggregationInput!], skip: Int, take: Int, where: ProfileWhereInput): [ProfileGroupBy!]!
  groupBySubscriptionType(by: [SubscriptionTypeScalarFieldEnum!]!, having: SubscriptionTypeScalarWhereWithAggregatesInput, orderBy: [SubscriptionTypeOrderByWithAggregationInput!], skip: Int, take: Int, where: SubscriptionTypeWhereInput): [SubscriptionTypeGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  paymentSubscription(where: PaymentSubscriptionWhereUniqueInput!): PaymentSubscription
  paymentSubscriptions(cursor: PaymentSubscriptionWhereUniqueInput, distinct: [PaymentSubscriptionScalarFieldEnum!], orderBy: [PaymentSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentSubscriptionWhereInput): [PaymentSubscription!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  subscriptionType(where: SubscriptionTypeWhereUniqueInput!): SubscriptionType
  subscriptionTypes(cursor: SubscriptionTypeWhereUniqueInput, distinct: [SubscriptionTypeScalarFieldEnum!], orderBy: [SubscriptionTypeOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionTypeWhereInput): [SubscriptionType!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  Agent
  ListingManager
  Manager
  Owner
  QCAnalysit
  QCApprover
  Trader
  TradingManager
  WarehouseManager
}

type SocialMedia {
  facebook: String
  googlePlus: String
  instagram: String
  linkedin: String
  twitter: String
  youtube: String
}

input SocialMediaCreateInput {
  facebook: String
  googlePlus: String
  instagram: String
  linkedin: String
  twitter: String
  youtube: String
}

input SocialMediaNullableCompositeFilter {
  equals: SocialMediaObjectEqualityInput
  is: SocialMediaWhereInput
  isNot: SocialMediaWhereInput
  isSet: Boolean
}

input SocialMediaNullableUpdateEnvelopeInput {
  set: SocialMediaCreateInput
  unset: Boolean
  upsert: SocialMediaUpsertInput
}

input SocialMediaObjectEqualityInput {
  facebook: String
  googlePlus: String
  instagram: String
  linkedin: String
  twitter: String
  youtube: String
}

input SocialMediaOrderByInput {
  facebook: SortOrder
  googlePlus: SortOrder
  instagram: SortOrder
  linkedin: SortOrder
  twitter: SortOrder
  youtube: SortOrder
}

input SocialMediaUpdateInput {
  facebook: NullableStringFieldUpdateOperationsInput
  googlePlus: NullableStringFieldUpdateOperationsInput
  instagram: NullableStringFieldUpdateOperationsInput
  linkedin: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
  youtube: NullableStringFieldUpdateOperationsInput
}

input SocialMediaUpsertInput {
  set: SocialMediaCreateInput!
  update: SocialMediaUpdateInput!
}

input SocialMediaWhereInput {
  AND: [SocialMediaWhereInput!]
  NOT: [SocialMediaWhereInput!]
  OR: [SocialMediaWhereInput!]
  facebook: StringNullableFilter
  googlePlus: StringNullableFilter
  instagram: StringNullableFilter
  linkedin: StringNullableFilter
  twitter: StringNullableFilter
  youtube: StringNullableFilter
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

enum SubscriptionStatus {
  Active
  Closed
  Deleted
  Inactive
  Pending
}

type SubscriptionType {
  _count: SubscriptionTypeCount
  count: Int
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  paymentSubscriptions(cursor: PaymentSubscriptionWhereUniqueInput, distinct: [PaymentSubscriptionScalarFieldEnum!], orderBy: [PaymentSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentSubscriptionWhereInput): [PaymentSubscription!]!
  price: String
  updatedAt: DateTime!
}

type SubscriptionTypeAvgAggregate {
  count: Float
}

input SubscriptionTypeAvgOrderByAggregateInput {
  count: SortOrder
}

type SubscriptionTypeCount {
  paymentSubscriptions: Int!
}

type SubscriptionTypeCountAggregate {
  _all: Int!
  count: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  price: Int!
  updatedAt: Int!
}

input SubscriptionTypeCountOrderByAggregateInput {
  count: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

input SubscriptionTypeCreateInput {
  count: Int
  createdAt: DateTime
  description: String
  id: String
  name: String!
  paymentSubscriptions: PaymentSubscriptionCreateNestedManyWithoutLastSubscriptionTypeInput
  price: String
  updatedAt: DateTime
}

input SubscriptionTypeCreateManyInput {
  count: Int
  createdAt: DateTime
  description: String
  id: String
  name: String!
  price: String
  updatedAt: DateTime
}

input SubscriptionTypeCreateNestedOneWithoutPaymentSubscriptionsInput {
  connect: SubscriptionTypeWhereUniqueInput
  connectOrCreate: SubscriptionTypeCreateOrConnectWithoutPaymentSubscriptionsInput
  create: SubscriptionTypeCreateWithoutPaymentSubscriptionsInput
}

input SubscriptionTypeCreateOrConnectWithoutPaymentSubscriptionsInput {
  create: SubscriptionTypeCreateWithoutPaymentSubscriptionsInput!
  where: SubscriptionTypeWhereUniqueInput!
}

input SubscriptionTypeCreateWithoutPaymentSubscriptionsInput {
  count: Int
  createdAt: DateTime
  description: String
  id: String
  name: String!
  price: String
  updatedAt: DateTime
}

type SubscriptionTypeGroupBy {
  _avg: SubscriptionTypeAvgAggregate
  _count: SubscriptionTypeCountAggregate
  _max: SubscriptionTypeMaxAggregate
  _min: SubscriptionTypeMinAggregate
  _sum: SubscriptionTypeSumAggregate
  count: Int
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  price: String
  updatedAt: DateTime!
}

type SubscriptionTypeMaxAggregate {
  count: Int
  createdAt: DateTime
  description: String
  id: String
  name: String
  price: String
  updatedAt: DateTime
}

input SubscriptionTypeMaxOrderByAggregateInput {
  count: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

type SubscriptionTypeMinAggregate {
  count: Int
  createdAt: DateTime
  description: String
  id: String
  name: String
  price: String
  updatedAt: DateTime
}

input SubscriptionTypeMinOrderByAggregateInput {
  count: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

input SubscriptionTypeOrderByWithAggregationInput {
  _avg: SubscriptionTypeAvgOrderByAggregateInput
  _count: SubscriptionTypeCountOrderByAggregateInput
  _max: SubscriptionTypeMaxOrderByAggregateInput
  _min: SubscriptionTypeMinOrderByAggregateInput
  _sum: SubscriptionTypeSumOrderByAggregateInput
  count: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  price: SortOrder
  updatedAt: SortOrder
}

input SubscriptionTypeOrderByWithRelationInput {
  count: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  paymentSubscriptions: PaymentSubscriptionOrderByRelationAggregateInput
  price: SortOrder
  updatedAt: SortOrder
}

input SubscriptionTypeRelationFilter {
  is: SubscriptionTypeWhereInput
  isNot: SubscriptionTypeWhereInput
}

enum SubscriptionTypeScalarFieldEnum {
  count
  createdAt
  description
  id
  name
  price
  updatedAt
}

input SubscriptionTypeScalarWhereWithAggregatesInput {
  AND: [SubscriptionTypeScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionTypeScalarWhereWithAggregatesInput!]
  OR: [SubscriptionTypeScalarWhereWithAggregatesInput!]
  count: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  price: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type SubscriptionTypeSumAggregate {
  count: Int
}

input SubscriptionTypeSumOrderByAggregateInput {
  count: SortOrder
}

input SubscriptionTypeUpdateInput {
  count: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  paymentSubscriptions: PaymentSubscriptionUpdateManyWithoutLastSubscriptionTypeInput
  price: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionTypeUpdateManyMutationInput {
  count: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionTypeUpdateOneWithoutPaymentSubscriptionsInput {
  connect: SubscriptionTypeWhereUniqueInput
  connectOrCreate: SubscriptionTypeCreateOrConnectWithoutPaymentSubscriptionsInput
  create: SubscriptionTypeCreateWithoutPaymentSubscriptionsInput
  delete: Boolean
  disconnect: Boolean
  update: SubscriptionTypeUpdateWithoutPaymentSubscriptionsInput
  upsert: SubscriptionTypeUpsertWithoutPaymentSubscriptionsInput
}

input SubscriptionTypeUpdateWithoutPaymentSubscriptionsInput {
  count: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionTypeUpsertWithoutPaymentSubscriptionsInput {
  create: SubscriptionTypeCreateWithoutPaymentSubscriptionsInput!
  update: SubscriptionTypeUpdateWithoutPaymentSubscriptionsInput!
}

input SubscriptionTypeWhereInput {
  AND: [SubscriptionTypeWhereInput!]
  NOT: [SubscriptionTypeWhereInput!]
  OR: [SubscriptionTypeWhereInput!]
  count: IntNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  paymentSubscriptions: PaymentSubscriptionListRelationFilter
  price: StringNullableFilter
  updatedAt: DateTimeFilter
}

input SubscriptionTypeWhereUniqueInput {
  id: String
}

type User {
  _count: UserCount
  aadhaar: Doc
  aadhaarMobile: String
  address: [Address!]!
  contacts: [ContactNumber!]!
  craetedBussinessUnits(cursor: BussinessUnitWhereUniqueInput, distinct: [BussinessUnitScalarFieldEnum!], orderBy: [BussinessUnitOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessUnitWhereInput): [BussinessUnit!]!
  createdAt: DateTime!
  createdBussiness(cursor: BussinessWhereUniqueInput, distinct: [BussinessScalarFieldEnum!], orderBy: [BussinessOrderByWithRelationInput!], skip: Int, take: Int, where: BussinessWhereInput): [Bussiness!]!
  email: String
  firstName: String
  id: String!
  image: String
  isEmailVerified: Boolean!
  isMobileVerified: Boolean!
  lastName: String
  mobile: String!
  panCard: Doc
  profiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  updatedAt: DateTime!
}

type UserCount {
  craetedBussinessUnits: Int!
  createdBussiness: Int!
  profiles: Int!
}

type UserCountAggregate {
  _all: Int!
  aadhaarMobile: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  id: Int!
  image: Int!
  isEmailVerified: Int!
  isMobileVerified: Int!
  lastName: Int!
  mobile: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  aadhaarMobile: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  image: SortOrder
  isEmailVerified: SortOrder
  isMobileVerified: SortOrder
  lastName: SortOrder
  mobile: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  aadhaar: DocNullableCreateEnvelopeInput
  aadhaarMobile: String
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  craetedBussinessUnits: BussinessUnitCreateNestedManyWithoutCCreatedByInput
  createdAt: DateTime
  createdBussiness: BussinessCreateNestedManyWithoutCreatedByInput
  email: String
  firstName: String
  id: String
  image: String
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  lastName: String
  mobile: String!
  panCard: DocNullableCreateEnvelopeInput
  profiles: ProfileCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateManyInput {
  aadhaar: DocNullableCreateEnvelopeInput
  aadhaarMobile: String
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  image: String
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  lastName: String
  mobile: String!
  panCard: DocNullableCreateEnvelopeInput
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutCraetedBussinessUnitsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCraetedBussinessUnitsInput
  create: UserCreateWithoutCraetedBussinessUnitsInput
}

input UserCreateNestedOneWithoutCreatedBussinessInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedBussinessInput
  create: UserCreateWithoutCreatedBussinessInput
}

input UserCreateNestedOneWithoutProfilesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfilesInput
  create: UserCreateWithoutProfilesInput
}

input UserCreateOrConnectWithoutCraetedBussinessUnitsInput {
  create: UserCreateWithoutCraetedBussinessUnitsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCreatedBussinessInput {
  create: UserCreateWithoutCreatedBussinessInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCraetedBussinessUnitsInput {
  aadhaar: DocNullableCreateEnvelopeInput
  aadhaarMobile: String
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  createdAt: DateTime
  createdBussiness: BussinessCreateNestedManyWithoutCreatedByInput
  email: String
  firstName: String
  id: String
  image: String
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  lastName: String
  mobile: String!
  panCard: DocNullableCreateEnvelopeInput
  profiles: ProfileCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutCreatedBussinessInput {
  aadhaar: DocNullableCreateEnvelopeInput
  aadhaarMobile: String
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  craetedBussinessUnits: BussinessUnitCreateNestedManyWithoutCCreatedByInput
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  image: String
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  lastName: String
  mobile: String!
  panCard: DocNullableCreateEnvelopeInput
  profiles: ProfileCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutProfilesInput {
  aadhaar: DocNullableCreateEnvelopeInput
  aadhaarMobile: String
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  craetedBussinessUnits: BussinessUnitCreateNestedManyWithoutCCreatedByInput
  createdAt: DateTime
  createdBussiness: BussinessCreateNestedManyWithoutCreatedByInput
  email: String
  firstName: String
  id: String
  image: String
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  lastName: String
  mobile: String!
  panCard: DocNullableCreateEnvelopeInput
  updatedAt: DateTime
}

input UserEmailMobileCompoundUniqueInput {
  email: String!
  mobile: String!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  aadhaarMobile: String
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  image: String
  isEmailVerified: Boolean!
  isMobileVerified: Boolean!
  lastName: String
  mobile: String!
  updatedAt: DateTime!
}

type UserMaxAggregate {
  aadhaarMobile: String
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  image: String
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  lastName: String
  mobile: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  aadhaarMobile: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  image: SortOrder
  isEmailVerified: SortOrder
  isMobileVerified: SortOrder
  lastName: SortOrder
  mobile: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  aadhaarMobile: String
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  image: String
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  lastName: String
  mobile: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  aadhaarMobile: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  image: SortOrder
  isEmailVerified: SortOrder
  isMobileVerified: SortOrder
  lastName: SortOrder
  mobile: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  aadhaarMobile: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  image: SortOrder
  isEmailVerified: SortOrder
  isMobileVerified: SortOrder
  lastName: SortOrder
  mobile: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  aadhaar: DocOrderByInput
  aadhaarMobile: SortOrder
  address: AddressOrderByCompositeAggregateInput
  contacts: ContactNumberOrderByCompositeAggregateInput
  craetedBussinessUnits: BussinessUnitOrderByRelationAggregateInput
  createdAt: SortOrder
  createdBussiness: BussinessOrderByRelationAggregateInput
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  image: SortOrder
  isEmailVerified: SortOrder
  isMobileVerified: SortOrder
  lastName: SortOrder
  mobile: SortOrder
  panCard: DocOrderByInput
  profiles: ProfileOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  aadhaarMobile
  createdAt
  email
  firstName
  id
  image
  isEmailVerified
  isMobileVerified
  lastName
  mobile
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  aadhaarMobile: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  firstName: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  isEmailVerified: BoolWithAggregatesFilter
  isMobileVerified: BoolWithAggregatesFilter
  lastName: StringNullableWithAggregatesFilter
  mobile: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum UserStatus {
  active
  blocked
  invited
  otpVerificationPending
  ownerVerificationPending
}

input UserUpdateInput {
  aadhaar: DocNullableUpdateEnvelopeInput
  aadhaarMobile: NullableStringFieldUpdateOperationsInput
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  craetedBussinessUnits: BussinessUnitUpdateManyWithoutCCreatedByInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBussiness: BussinessUpdateManyWithoutCreatedByInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isEmailVerified: BoolFieldUpdateOperationsInput
  isMobileVerified: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  mobile: StringFieldUpdateOperationsInput
  panCard: DocNullableUpdateEnvelopeInput
  profiles: ProfileUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  aadhaar: DocNullableUpdateEnvelopeInput
  aadhaarMobile: NullableStringFieldUpdateOperationsInput
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isEmailVerified: BoolFieldUpdateOperationsInput
  isMobileVerified: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  mobile: StringFieldUpdateOperationsInput
  panCard: DocNullableUpdateEnvelopeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCreatedBussinessInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedBussinessInput
  create: UserCreateWithoutCreatedBussinessInput
  update: UserUpdateWithoutCreatedBussinessInput
  upsert: UserUpsertWithoutCreatedBussinessInput
}

input UserUpdateOneRequiredWithoutProfilesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfilesInput
  create: UserCreateWithoutProfilesInput
  update: UserUpdateWithoutProfilesInput
  upsert: UserUpsertWithoutProfilesInput
}

input UserUpdateOneWithoutCraetedBussinessUnitsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCraetedBussinessUnitsInput
  create: UserCreateWithoutCraetedBussinessUnitsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCraetedBussinessUnitsInput
  upsert: UserUpsertWithoutCraetedBussinessUnitsInput
}

input UserUpdateWithoutCraetedBussinessUnitsInput {
  aadhaar: DocNullableUpdateEnvelopeInput
  aadhaarMobile: NullableStringFieldUpdateOperationsInput
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBussiness: BussinessUpdateManyWithoutCreatedByInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isEmailVerified: BoolFieldUpdateOperationsInput
  isMobileVerified: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  mobile: StringFieldUpdateOperationsInput
  panCard: DocNullableUpdateEnvelopeInput
  profiles: ProfileUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutCreatedBussinessInput {
  aadhaar: DocNullableUpdateEnvelopeInput
  aadhaarMobile: NullableStringFieldUpdateOperationsInput
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  craetedBussinessUnits: BussinessUnitUpdateManyWithoutCCreatedByInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isEmailVerified: BoolFieldUpdateOperationsInput
  isMobileVerified: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  mobile: StringFieldUpdateOperationsInput
  panCard: DocNullableUpdateEnvelopeInput
  profiles: ProfileUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutProfilesInput {
  aadhaar: DocNullableUpdateEnvelopeInput
  aadhaarMobile: NullableStringFieldUpdateOperationsInput
  address: [AddressCreateInput!]
  contacts: [ContactNumberCreateInput!]
  craetedBussinessUnits: BussinessUnitUpdateManyWithoutCCreatedByInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBussiness: BussinessUpdateManyWithoutCreatedByInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isEmailVerified: BoolFieldUpdateOperationsInput
  isMobileVerified: BoolFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  mobile: StringFieldUpdateOperationsInput
  panCard: DocNullableUpdateEnvelopeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutCraetedBussinessUnitsInput {
  create: UserCreateWithoutCraetedBussinessUnitsInput!
  update: UserUpdateWithoutCraetedBussinessUnitsInput!
}

input UserUpsertWithoutCreatedBussinessInput {
  create: UserCreateWithoutCreatedBussinessInput!
  update: UserUpdateWithoutCreatedBussinessInput!
}

input UserUpsertWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput!
  update: UserUpdateWithoutProfilesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  aadhaar: DocNullableCompositeFilter
  aadhaarMobile: StringNullableFilter
  address: [AddressObjectEqualityInput!]
  contacts: [ContactNumberObjectEqualityInput!]
  craetedBussinessUnits: BussinessUnitListRelationFilter
  createdAt: DateTimeFilter
  createdBussiness: BussinessListRelationFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  isEmailVerified: BoolFilter
  isMobileVerified: BoolFilter
  lastName: StringNullableFilter
  mobile: StringFilter
  panCard: DocNullableCompositeFilter
  profiles: ProfileListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email_mobile: UserEmailMobileCompoundUniqueInput
  id: String
  mobile: String
}

input contactInfoNullableCreateEnvelopeInput {
  set: ContactInfoCreateInput
}

input contactInfoNullableUpdateEnvelopeInput {
  set: ContactInfoCreateInput
  unset: Boolean
  upsert: ContactInfoUpsertInput
}

input contactInfoObjectEqualityInput {
  contact: [ContactNumberObjectEqualityInput!]
  email: String
  latitude: String
  longitude: String
  socialMedia: SocialMediaObjectEqualityInput
  website: String
}
